<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Port scan</title>
        <para>
Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés szerepére!
https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Savitar97/Prog2/tree/master/Portscan">https://github.com/Savitar97/Prog2/tree/master/Portscan</link>                  
        </para>
        <para>
            A feladat az volt, mutassunk rá a kivételkezelés szerepére a fenti programban. Ugyebár a kivételkezelés a javaban is try-catch szerkezettel történik.
            Így kapcsolódik az elmélethez is a feladat. A kivételkezelés egy egyedi felhasználási módját láthatjuk.
        </para>
        <programlisting language="java"><![CDATA[
            public static void main(String[] args) {
        
                for(int i=0; i<1024; ++i)
                    
                    try {
                        
                        java.net.Socket socket = new java.net.Socket(args[0], i);
                        
                        System.out.println(i + " figyeli");
                        
                        socket.close();
                        
                    } catch (Exception e) {
                        
                        System.out.println(i + " nem figyeli");
                        
                    }
            }
            ]]>
          </programlisting>
          <para>
              A program argumentumként egy címet vár. Mi localhosttal fogjuk használni. Mivel ez akár a támadható portok felderítésére is alkalmazható lenne.
          </para>
          <figure>
            <title>Port scan</title>
       <mediaobject>
               <imageobject>
                   <imagedata fileref="img/portscan.png" scale="30" />
               </imageobject>
       </mediaobject>
       </figure>
          <para>
              Végig zongorázzuk 1024 ig a portokat ha sikerül kapcsolatot létrehozni az adott porton akkor ott van egy szerver folyamat. Ekkor lényegében nem csinálunk semmit
              csak bezárjuk a socketet. Ha nem sikerül kapcsolatot létesíteni akkor azt a hibakezelő kapja el. 
          </para>
          <figure>
            <title>Scan Exception</title>
       <mediaobject>
               <imageobject>
                   <imagedata fileref="img/socket.png" scale="30" />
               </imageobject>
       </mediaobject>
       </figure>
    </section>        

    <section>
        <title>AOP</title>
        <para>
            Szőj bele egy átszövő vonatkozást az első védési programod Java átiratába! (Sztenderd védési
feladat volt korábban.)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Savitar97/Prog2/tree/master/AspectJ">https://github.com/Savitar97/Prog2/tree/master/AspectJ</link>               
        </para>
        <para>
            A feladat az elmélethez a kódgenerálást támogató nyelvi elemmel kapcsolódik. Az aspectj egy aspektus orientált programozási nyelv. Segítségével a programban töréspontokat hozhatunk létre.
            És beszúrhatunk egy adott elem lefutása elé mögé más utasítást,de akár egy függvény tartalmát is kicserélhetjük.
        </para>
        <para>
            A feladat elkezdéséhez telepítenünk kell az aspect j-t. Ubuntun ezt a következőképpen tudjuk megcsinálni: <command>sudo apt install aspectj</command>.
            Majd a következő paranccsal kell fordítanunk:<command>ajc LZWBinFa.java Aspect.aj</command>.Az aspect előnye annyi, hogy úgy írhatunk a kódunkba,hogy lényegébe abba nem kell belenyúlnunk.
            Emellett a nyomkövetést is segíti. Számomra elég bonyolultnak tűnt a használata főleg ha már osztályból kellett adatot kiszedni. Egy másfajta szemléletmódot igényel szerintem. Néhány alap fogalom
            A csatlakozási pont vagy joint pont egy olyan pont a programban amikor valami történik. Ilyen például amikor egy metódus meghívódik vagy egy kivételt throwolunk,inicializálunk egy objektumot stb.
            A pointcutnak van egy jobb és bal oldala kettőspont választja el a kettőt.Bal oldalon a pointcut neve és paraméterei állnak. Az paraméterekben az elérhető adatokhoz férhetünk hozzá ha lefut a metódus.
            A jobboldalt maga a pointcut szerepel. Ez általában a call vagy az execution. Ebben írjuk meg, hogy mire utal a pointcut a valódi osztályunkban.
        </para>
        <para>
            Advice-ok lényegében a before, after és around. Tehát, hogy a metódus hívása előtt,után vagy közben esetleg helyett fusson le. A within paranccsal mondhatjuk meg,hogy melyik osztályból akarjuk használni.
            A target az a java objektum ami a metódust hívja.Argumentumok azok az értékek amiket a metódusban hívunk.
        </para>
        <programlisting language="java"><![CDATA[
            private long egyes = 0;
            private long nullas = 0;
            pointcut pushback() : execution(public void push_back(char));
            before(char ch): pushback() && args(ch){
            if(ch == '1'){
            egyes++;
            } else {
            nullas++;
            }
            }
            pointcut main() : execution(public static void main(String[]));
            after() : main(){
            System.out.println("Egyesek száma: " + egyes);
            System.out.println("Nullások száma: " + nullas);
            }
            ]]>
          </programlisting>
          <para>
              Vegyük elsőnek példának az egyesek és nullások megszámlálását. Ugyebár deklarálunk és inicializálunk 2 változót amibe majd tároljuk
              a megszámolt értékeket. Aztán jön a pointcutunk aminek a neve pushback lesz. A jobb oldala maga a point cut. Tehát oda tesszük a pointcutot 
              ahol lefut a fő program push_back(char) függvénye. Aztán mielőtt ez lefut az argumentum karakterjét átadjuk és megnézzük egyes-e vagy nulla.
              Majd létrehozunk egy új pointcutot a mainre. És megmondjuk, hogy miután lefut a main írjuk ki a megszámol egyesek és nullások számát.
          </para>
          <para>
              Most nézzük meg a kiir függvényre való pointcut-unkat:
          </para>
          <programlisting language="java"><![CDATA[
            public pointcut meghiv(LZWBinFa.Csomopont n, PrintWriter os) 
            : call(void LZWBinFa.kiir(LZWBinFa.Csomopont, PrintWriter)) && args(n,os);
            
            after(LZWBinFa.Csomopont n, PrintWriter os) : meghiv(n, os)
            {   
                

                try{
                os=new PrintWriter("preorder.txt");
                preOrder(n,os);
                os.flush();
                }
                catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                
                depth = 0;
                try{
                os=new PrintWriter("postorder.txt");
                postOrder(n,os);
                os.flush();
                
                }
                catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                

            }
            
            
            public void preOrder(LZWBinFa.Csomopont n, PrintWriter p) 
            {

                if (n != null)
                {

                    ++depth;
                    for (int i = 0; i < depth; ++i)
                    p.print("---");
                    p.print(n.getBetu () + "(" + depth + ")\n");
                    preOrder (n.getBalNulla (), p);
                    preOrder (n.getJobbEgy (), p);
                    --depth;
                }
            }
            public void postOrder(LZWBinFa.Csomopont n, PrintWriter p) 
            {
                if (n != null)
                {
                    
                    ++depth;
                    postOrder (n.getBalNulla (), p);
                    postOrder (n.getJobbEgy (), p);
                    for (int i = 0; i < depth; ++i)
                        p.print("---");
                    p.print(n.getBetu () + "(" + depth + ")\n");
                    --depth;
                }
            }
            ]]>
          </programlisting>
          <para>
              Na itt a pointcutunkat a kiir függvény hívására tesszük.Argumentumként átvesszük a printwriter és a csomópont n-t.
              Aztán a már megszokott pre és post order bejárásunkat láthatjuk függvényként ez bevprogról már ismerős volt. Ugyebár alapból
              inorder-ben iratjuk ki. Aztán megmondjuk, hogy minden egyes kiir hívás után hajtódjon végre a másik két kiir függvény is.
              Fontos a try-catch szerkezet máskülönben errort kapunk, hogy nincs ami elkapja az exceptiont. Emellett nagyon fontos szerepet játszik
              még az, hogy 2 FileWriter os-t hozok létre. És mind a 2-t flush-ölöm.Ugyebár a flush a bufferben lévő stringet azonnal kiírja.
          </para>
          <figure>
            <title>Pre-post-inorder AspectJ-vel</title>
       <mediaobject>
               <imageobject>
                   <imagedata fileref="img/AspectPreInPost.png" scale="30" />
               </imageobject>
       </mediaobject>
       </figure>
    </section>        
    <section>
                <title>Android Játék</title>
                <para>
                    Megoldás forrása:<link xlink:href="https://github.com/Savitar97/Prog2/tree/master/PoroSpin">https://github.com/Savitar97/Prog2/tree/master/PoroSpin</link>  
                </para>
                <para>Írjunk egy egyszerű Androidos „játékot”! Építkezzünk például a 2. hét „Helló, Android!” feladatára!</para>
                <para>
                    Androidos játéknak egy üvegpörgetős játékot csináltam kicsit átalakítva a vizualizációt.
                </para>
                <para>
                    Elsőként a felhasznált backgroundot és a képet amit majd pörgetek bele kellett másolnom a drawable-ba. Majd az activity_main.xmlben módosítani a backgroundot és felvenni az image-t.
                </para>
                <programlisting language="java"><![CDATA[
                    <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
                    xmlns:tools="http://schemas.android.com/tools"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:background="@drawable/background"
                    tools:context=".MainActivity">

                    <ImageView
                        android:id="@+id/yasu"
                        android:layout_width="800dp"
                        android:layout_height="800dp"
                        android:src="@drawable/yas"
                        android:layout_centerInParent="true"
                        android:onClick="spinToWin"
                        />
                    ]]>
                  </programlisting>
                  <para>
                      Itt ami lényeg nekünk azt a +id amivel hivatkozhatunk majd erre az image-re. És az onClick. Mivel
                      ez fog hivatkozni a pörgetés függvényre.
                  </para>
                  <programlisting language="java"><![CDATA[
                    private ImageView yasuo;
                    private Random random = new Random();
                    private int lastDir;
                    private boolean spinning;

                    @Override
                    protected void onCreate(Bundle savedInstanceState) {
                        super.onCreate(savedInstanceState);
                        setContentView(R.layout.activity_main);

                        yasuo = findViewById(R.id.yasu);
                    }
                    ]]>
                  </programlisting>
                  <para>
                      Kezdetben felvesszük a szükséges változókat. Majd az onCreateben beállítjuk a view-ot. És az imageview-nak a findViewById átadjuk a kép id-ját.
                      Ezért volt nagyon lényeges nekünk az id.
                  </para>
                  <programlisting language="java"><![CDATA[
                    public void spinToWin(View v) {
                        if (!spinning) {
                            int newDir = random.nextInt(3600);
                            float pivotX = yasuo.getWidth() / 2;
                            float pivotY = yasuo.getHeight() / 2;
                
                            Animation rotate = new RotateAnimation(lastDir, newDir, pivotX, pivotY);
                            rotate.setDuration(2500);
                            rotate.setFillAfter(true);
                            rotate.setAnimationListener(new Animation.AnimationListener() {
                                @Override
                                public void onAnimationStart(Animation animation) {
                                    spinning = true;
                                }
                
                                @Override
                                public void onAnimationEnd(Animation animation) {
                                    spinning = false;
                                }
                
                                @Override
                                public void onAnimationRepeat(Animation animation) {
                
                                }
                            });
                
                            lastDir = newDir;
                            yasuo.startAnimation(rotate);
                        }
                    }
                    ]]>
                  </programlisting>
                  <para>
                      Majd jön a függvény amivel pörgetjük az onClick-re. Ugyebár meghívunk egy rotate animation-t. Mert meg akarjuk forgatni.
                      Az új irányt randommal adjuk meg 3600 al számolunk mert azt akarjuk, hogy esetleg többször is körbe tudjon fordulni. A duration-el adjuk meg, hogy mennyi ideig tartson az animáció millisecben.
                      A fill after azt adja meg, hogy az animáció transzformációja az animáció befejeztével történjen. A pivot az az x,y tengely. Majd az animáció listenerben az animáció kezdeténél
                      a forgást true-ra állítjuk. A végeztével false-oljuk. Aztán ugyebár az előző szögnek átadjuk az új szöget.
                  </para>
                  <figure>
                        <title>PoroSpin</title>
                   <mediaobject>
                           <imageobject>
                               <imagedata fileref="img/porospin.jpg" scale="50" />
                           </imageobject>
                   </mediaobject>
                   </figure>
                  <para>Képek forrása:</para>
                  <para>
                       <link xlink:href="https://en.wikipedia.org/wiki/Thrash_Zone">https://en.wikipedia.org/wiki/Thrash_Zone</link>
                  </para>
                  <para><link xlink:href="https://www.pngkit.com/view/u2t4i1o0y3u2t4t4_project-yasuo-png-league-of-legends-yasuo-pixel/">https://www.pngkit.com/view/u2t4i1o0y3u2t4t4_project-yasuo-png-league-of-legends-yasuo-pixel/</link></para>
        </section>
        <section>
        <title>Junit teszt</title>
        <para>
            A https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat
poszt kézzel számított mélységét és szórását dolgozd be egy Junit tesztbe (sztenderd védési feladat
volt korábban).
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Savitar97/Prog2/tree/master/JavaApplication3">https://github.com/Savitar97/Prog2/tree/master/JavaApplication3</link>              
        </para>
        
        <para>
            A feladat az volt, hogy kézzel számoljuk ki a binfának a szórását, mélységét. Az elmélethez a hibakezelés révén kapcsolódik. Megadhatjuk a várt értékeinket és teszt értékekkel futtathatunk függvényeket a kódunkból. Ezáltal ellenőrizve annak helyes működését.
        </para>
        <para>
            A gép által számított értékek a következők:
        </para>
        <figure>
                <title>Gép által számított értékek</title>
           <mediaobject>
                   <imageobject>
                       <imagedata fileref="img/JunitTeszt.png" scale="30" />
                   </imageobject>
           </mediaobject>
           </figure>
           <para>
               Majd az általam számított értékek: 
           </para>
           <figure>
                <title>Kézzel számolt értékek</title>
           <mediaobject>
                   <imageobject>
                       <imagedata fileref="img/Junitkezzel.jpg" scale="30" />
                   </imageobject>
           </mediaobject>
           </figure>
           <para>
               És most tesztelés Junittal.
           </para>
           <programlisting language="java"><![CDATA[
            public class LZWBinFaTest {
                LZWBinFa binfa = new LZWBinFa();
                
                String str = "0111100101100";
                
                @Test
                public void atlagTest() {
                    for(int i = 0; i < str.length(); i++){
                        binfa.push_back(str.charAt(i));
                    }
                    double atlag = binfa.getAtlag();
                    assertEquals(2.25, atlag, 0.001);
                }
                @Test
                public void szorasTest() {
                    for(int i = 0; i < str.length(); i++){
                        binfa.push_back(str.charAt(i));
                    }
                    double szoras = binfa.getSzoras();
                    assertEquals(0.5, szoras, 0.001);
                }
                @Test
                public void melysegTest() {
                    for(int i = 0; i < str.length(); i++){
                    binfa.push_back(str.charAt(i));
                    }
                    double melyseg = binfa.getMelyseg();
                    assertEquals(3, melyseg, 0.001);
                }
            }
            ]]>
          </programlisting>
          <para>
              Ugyebár a stringben megadjuk a bitsorozatot amit várunk. Majd ezt bitenként minden tesztben feldolgozzuk.
              Az assertEqual függvényben megadjuk a várt értéket és átadjuk a program által kiszámolt értéket. Az utolsó érték
              az eltérést adja meg ez természetesen a kerekítésből fakadhat.
          </para>
          <figure>
            <title>Junittal teszt</title>
       <mediaobject>
               <imageobject>
                   <imagedata fileref="img/JunitTESZT.png" scale="30" />
               </imageobject>
       </mediaobject>
       </figure>
  
    </section>
    

</chapter>                
