<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Liskov!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Liskov helyettesítés sértése</title>
        <para>
Írjunk olyan OO, leforduló Java és C++ kódcsipetet, amely megsérti a Liskov elvet! Mutassunk rá a
megoldásra: jobb OO tervezés.
https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf (93-99 fólia)
(számos példa szerepel az elv megsértésére az UDPROG repóban, lásd pl. source/binom/Batfai-
Barki/madarak/)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/Savitar97/Prog2/tree/master/Liskov">https://github.com/Savitar97/Prog2/tree/master/Liskov</link>              
        </para>
        <para>
            A liskov elv arról szól,hogy minden osztályt helyettesíthessen a gyermek osztálya anélkül,
            hogy a program működése megváltozna. Legyen S T-nek egy leszármazottja, ekkor minden T típúsú
            objektum legyen helyettesíthető S objektumokkal. Jelen esetünkben vizsgáljunk meg egy példát:
        </para>
        <programlisting language="java"><![CDATA[
            class Madar{
                void repul(){
                   System.out.println("I belive I can fly");
               }
           }
           
           class Sas extends Madar{
               @Override
               void repul(){
                   System.out.println("A sas repül");
               }
           }
           
           class Pingvin extends Madar{
           
           }
           
           class Liskov{
               public static void main(String[] args) {
                   Madar madar=new Madar();
                   madar.repul();
                   madar=new Sas();
                   madar.repul();
                   madar=new Pingvin();
                   madar.repul();
               }
           }
            ]]>
          </programlisting>
          <figure>
            <title>Liskovsert</title>
        <mediaobject>
               <imageobject>
                   <imagedata fileref="img/Liskovsert.png" scale="200" />
               </imageobject>
       </mediaobject>
       </figure>
          <para>
              Jelen esetünkben a T az a madár és az S-ek a pingvin és a sas.Mint látható a liskov elv itt sérül ugyanis a program szerint a pingvin képes repülni. A probléma onnan adódik, hogy azt tettük fel, hogy minden madár tud repülni.
              Ezért tévesen a repül metódust a madár osztályba írtuk.Tehát az alap tervezéssel volt a probléma. A megoldás az, ha csinálunk egy külön interface-t, amely a repülés tulajdonságot jelenti,bár ekkor a madár osztályt is interface-ve kell alakítanunk, mivel a többszörös öröklődés nem lehetséges javaban.
              Hasonlót csak az interfacekkel érünk el.
          </para>
          <programlisting language="java"><![CDATA[
            interface Madar{
	 
            }
            
            interface RepuloMadar {
                abstract void repul();
            }
            class Sas  implements RepuloMadar{
                public void repul(){
                    System.out.println("A sas repül");
                }
            }
            
            class Pingvin implements Madar{
            
            }
            
            class Liskovjo{
                public static void main(String[] args) {
                    Sas sas=new Sas();
                    Pingvin pingvin=new Pingvin();
                    sas.repul();
                    pingvin.repul();//hibát fog kiirni mivel itt már nem tud repülni a pingvin
                }
            }
            ]]>
          </programlisting>
        <figure>
            <title>Liskovjo</title>
        <mediaobject>
               <imageobject>
                   <imagedata fileref="img/Liskovjo.png" scale="200" />
               </imageobject>
       </mediaobject>
       </figure>
          <para>
              A kódokról röviden. A különbség a C++-os és a Javas megvalósításban: Az osztályok létrehozása ugyan úgy a class kulcsszóval történik.
              Amit ezután észrevehetünk, hogy a C++-ban a láthatósági szintek külön részeket alkotnak pl.: public:, míg javaban minden egyes metódus vagy változó előtt jelezve találjuk a láthatóságát.
              Emellett a futás közbeni polimorfizmusra is találunk példát(amelynek része a metódus túlterhelés) még pedig a virtual kulcsszóval jelzett metódust a C++-ban és a Java-s kódban is, amikor Override-ot látunk. Szintúgy megjelenik az öröklődés mindkét esetben.
              Javaban ez az extends kulcsszóval történik míg C++-ban a class gyerekosztály:szülőosztály formában történik. 
          </para>
    </section>        

    <section>
        <title>Szülő-gyerek</title>
        <para>
            Írjunk Szülő-gyerek Java és C++ osztálydefiníciót, amelyben demonstrálni tudjuk, hogy az ősön
keresztül csak az ős üzenetei küldhetőek!
https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf (98. fólia)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Savitar97/Prog2/tree/master/Szulogyerek">https://github.com/Savitar97/Prog2/tree/master/Szulogyerek</link>              
        </para>
        <para>
            Ebben a feladatunkban megjelenik az öröklődés mint fontos tényező. Az öröklődésnél ugyebár a gyermek hozzáfér a szülő osztály
            definiált metódusaihoz, de fordítva ez nem igaz. Tekintsük meg az alábbi példát:
        </para>
        <programlisting language="java"><![CDATA[
            class Szulo{
                void message(){
                    System.out.println("Szülő üzenete.");
                }
            }
            
            class Pulya extends Szulo{
                @Override
                void message(){
                    System.out.println("Szülő üzenet felülír");
                }
                void message2(){
                    System.out.println("Gyerek üzenete");
                }
            }
            
            class Szulogyerek{
                public static void main(String[] args) {
                    Szulo szulo = new Szulo();
                    szulo.message();
                    szulo=new Pulya();
                    szulo.message();
                    //Itt látható, hogy a szülő nem tudja meghívni a gyerek metódusát.Tehát az ősön keresztül, csak az ős üzenetei küldhetők.A gyermeké nem.
                    //szulo.message2();
                    Pulya gyerek=new Pulya();
                    gyerek.message();
                    gyerek.message2();
            
                }
            }
            ]]>
          </programlisting>
          <figure>
            <title>Szulogyerek</title>
        <mediaobject>
               <imageobject>
                   <imagedata fileref="img/Szulogyerek.png" scale="200" />
               </imageobject>
       </mediaobject>
       </figure>
       <para>
           Ha a kikommentelt részt kiszedjük akkor errort kapunk.
       </para>
       <para>
           Na tehát van egy <classname>Szulo</classname> osztályunk, és egy <classname>Pulya</classname> osztályunk, amelyet a szülőből származtatunk.A származtatást a extends jelöli.
           A szülőnek van egy metódusa a message. A gyerek ezt override-olja(polimorfizmus) és ezen kívül van még egy message2 metódusa. Majd jön a példányosítás. Elsőnek is példányosítunk
           egy szülő típúsú objektumot ez a következő képpen zajlik Osztálynév amit követ az objektum neve ezt egy =-jel követi, aztán jön a new szó a példányosításhoz végül pedig a konstruktorja az osztálynak, amiben lehet inicializáció. Majd kiirassuk vele a metódusát.
           Majd a szülőn keresztül példányosítunk egy pulya osztályt. És meghívjuk a message-t. Mi történik? Az Overrideolt metódus fut le a szülő metódusa helyett.
       </para>
       <para>
           Most próbáljuk meg meghívni a message2-t. Azt várnánk, hogy lefog futni a függvény mivel az Overrideolt függvény lefut.De ez nem következik be, hanem errort kapunk.
           Mi lehet a probléma? Az, hogy a message-t a <classname>Pulya</classname> a szülőtől örökölte tehát a szülőn keresztül is képes elérni. Míg a message2-t a szülőosztály nem ismeri, mivel nincs a hatókörében.
           Viszont, ha példányosítunk egy Pulya osztálytípúsú objektumot, akkor az már ismerni fogja a message2-t. Ezen kívül egy kis plusz megjegyzés, ha leszármaztatunk egy osztályt és nem hozunk létre saját konstruktort akkor a szülő osztály paraméter nélküli konstruktorát fogja örökölni.
           Ezen kívül C++-ban támogatott a többszörös öröklődés tehát ott minden szülő osztály paraméter nélküli konstruktorát átveszi a gyermek.
       </para>
       <figure>
        <title>Szulogyerek</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/CPPSzulogyerek.png" scale="200" />
                </imageobject>
            </mediaobject>
        </figure>
    </section>        
    <section>
        <title>Anti OO</title>
        <para>
            A BBP algoritmussal 4 a Pi hexadecimális kifejtésének a 0. pozíciótól számított 10^6, 10^7, 10^8 darab
jegyét határozzuk meg C, C++, Java és C# nyelveken és vessük össze a futási időket!

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apas03.html#id561066">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apas03.html#id561066</link>
            <link xlink:href="https://github.com/Savitar97/Prog2/tree/master/AntiOO">https://github.com/Savitar97/Prog2/tree/master/AntiOO</link>       
        </para>
        <para>
        A következő táblázat tartalmazza a mérési eredményeinket:
        </para>
        <table border="1">
                <caption>Eredmények</caption>
                <thead align="left" valign="middle">
                   <tr>
                       <td>0xJegy</td>
                       <td>C[sec]</td>
                       <td>C++[sec]</td>
                       <td>C#[sec]</td>
                       <td>Java[sec]</td>
                   </tr>
                 </thead>
                <tbody align="left" valign="middle" >
                   <tr>
                     <td>10<superscript>6</superscript></td>
                     <td>1.879098</td>
                     <td>1.901872</td>
                     <td>2,064295</td>
                     <td>1.69</td>
                     </tr>
                     <tr>
                     <td>10<superscript>7</superscript></td>
                     <td>21.816081</td>
                     <td>21.985074</td>
                     <td>23,2984408</td>
                     <td>19.672</td>
                     </tr>
                     <tr>
                     <td>10<superscript>8</superscript></td>
                     <td>250.840815</td>
                     <td>251.886862</td>
                     <td>264,5961322</td>
                     <td>224.895</td>
                     </tr>
                </tbody>
            </table>
    <para>
        A BBP algoritmust az előző fejezetben már létrehoztuk és kitárgyaltuk. A programkódban viszont változások keletkeztek.
        Ennek az oka, hogy a C nem objektum orientált programozási nyelv.Míg a másik 3 igen.Bár java és C#-nál teljesen nem tudjuk eltüntetni az
        objektum orientáltságot. Az eredmények megszületéséhez ugyebár, mindig a for ciklusban lévő d-t kell megváltoztatnunk.
        A C#-os kód futtatásához a visual studio code-ot használtam. Ezen kívül szükséges volt még a 
        <command>sudo apt-get install dotnet-sdk-3.0</command> telepítése. Ezután Visual Studio Code terminálba <command>dotnet new console</command>
        majd <command>dotnet build</command> végül <command>run</command>. A build abba a mappába, amelyikben éppen vagyunk létrehoz egy új c# projektet.
        A projekt alapból egy helloworld program lesz.
    </para>
    <para>
        De visszakanyarodva a mérési eredményekhez. A java toronymagasan az első. Az interpreter úgy tűnik gyorsabb mint a compiler.
        Második helyen végzett a C és minimálisan lemaradva a C++. Utolsó helyen végzett a C# ez lehetséges kompatibilitási okokból is.(Windowson futtatva valószínüleg más eredményt produkált volna)
        A gép konfigja, amivel a teszt készült: A processzor egy i5-7200U, amely egy 2 mag 4 szálas processzor 2.5GHz-es alapórajellel és 3.1GHz Turbo Boost-al.
        A VGA egy Geforce 940MX 2gb ddr5 ös dedikált videó kártya. Ezen kívül 4 gb ddr4 es 2133MHz es RAM-mal van felszerelve a gép.
    </para>
    </section>
    <section>
        <title>Hello Android!</title>
        <para>
            Élesszük fel az SMNIST for Humans projektet!
https://gitlab.com/nbatfai/smnist/tree/master/forHumans/SMNISTforHumansExp3/app/src/main
Apró módosításokat eszközölj benne, pl. színvilág.
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Savitar97/Prog2/tree/master/smnist-master/forHumans/androidhuman">https://github.com/Savitar97/Prog2/tree/master/smnist-master/forHumans/androidhuman</link>               
        </para>
        <caution>
            <title>
                Tutorált
            </title>
            <para>Ebben a feladatban tutorált Racs Tamás.</para>
        </caution>
        <para>
            A feladatunk, hogy megváltoztassuk például a színvilágát az smnist android alkalmazásnak. Ehez először lekellett szednünk az android stúdiót. Én az ubuntu szoftverekből kerestem ki és telepítettem.
        </para>
        <para>
            Az android stúdió telepítése egyszerűen ment. A program felélesztése már kevésbé. Kezdetben importálni próbáltam.
            Hát ez nem jött össze sajnos, ugyanis a gradle fájlok és még rengeteg dolog hiányzott.
        </para>
        <para>
            Ezután új projekttel próbálkoztam kezdetben nagyon nem akart sikerülni. De végül csak feléledt.Ugyebár létrehoztam az üres projektet majd a kellő helyre bemásoltam a fileokat.
            De ettől még mindig hibát írt ki. Elsőnek is átkellett írni a package neveket a sajátomra. De ezután is hibába ütköztem.
            Két megoldást is találtam a hiba elhárítására kezdetben az volt a problémája, hogy a <command>android.support.v7.app.AppCompatActivity</command>
            nem találta. Erre a megoldás az volt, hogy a build.gradle-ben, a compile sdk verziót csökkentettem 27-re. A másikban Racs Tamás segített.
        </para>
        <programlisting language="java"><![CDATA[
            import androidx.appcompat.app.AppCompatActivity;
            public class SMNISTE3Activity extends AppCompatActivity 
            ]]>
          </programlisting>
          <para>
              Az SMNISTE3Activity.java-ban kellet a fent lévő módosításokat elvégezni. Ezen kívül beleütköztem abba a hibába is, hogy a program nem találta az R könyvtárát.
          </para>
          <programlisting language="java"><![CDATA[
            import com.example.androidhuman.R;
            ]]>
          </programlisting>
          <para>
              Ekkor egyszerűen importáltuk az R-t. A com.example.androidhuman helyére az aktuális package-et kell írni.
          </para>
          <para>
              De még ígysem működött. Ugyanis valamiért nem látta a program az SMNISTE3Activity osztályt. Ez azért volt mert egy helyen relatívan volt megadva az elérési út, ezt abszolútra javítva már indult is a program.
              Azaz még teljesen nem mert a kompatibilitási hibákat javítani kellett az android 8.1 előtti verziókhoz.
          </para>
          <para>
              Na de térjünk vissza a kódhoz. Ugyebár a színvilágot akarjuk módosítani. Ezt úgy tehetjük meg, hogy a SurfaceViewben találunk egy bg color nevű tömböt amelynek két eleme van.
              Ezek lesznek a villogó háttér színei RGB-ben megadva.
          </para>
          <para>
              A többi színt a cinit metódusban találjuk. A textpaint a körökben lévő szöveg színét módosítja. Az msgpaint a lent lévő értékeket jelöli, az elért teljesítményt leíró szöveg színét változtatja.
              A dotpaint logikusan a pont színét változtatja meg. A borderpaint a keret színét változtatja. Végül a fillPaint a pont és szöveg mögötti hátteret tölti ki az adott színnel.A módosítás eredménye lent látható a képen.
          </para>
          <para>
              Ha az elején felugró licence-et akarjuk módosítani akkor azt az Activityben tehetjük meg. Az android.alertdialog.builder-nél.
          </para>
        <figure>
                <title>Smnist</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="img/Android.png" scale="100" />
                        </imageobject>
                    </mediaobject>
        </figure>
    </section>
    <section>
        <title>Ciklomatikus komplexitás</title>
        <para>
            Számoljuk ki valamelyik programunk függvényeinek ciklomatikus komplexitását! Lásd a fogalom
tekintetében a https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf (77-79
fóliát)!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Savitar97/Prog2/tree/master/Komplexit%C3%A1s">https://github.com/Savitar97/Prog2/tree/master/Komplexit%C3%A1s</link>                
        </para>
        <para>
            A ciklomatikus komplexitás a program összetettségét vizsgálja. Megszálmolja a programban az metódusok, feltételes elágazások,
            ciklusok,try catch-ek, a logikai operátorok, a ?: operátorok és a ?. operátorok számát és ez alapján kalkulálja ki az értéket, amelyet McCabe értéknek is neveznek. A komplexitás számolásához a gráf
            elméletet használják fel. A ciklomatikus komplexitás az:
            M = E − N + 2P képlettel számolható ki, ahol M a McCabe érték, amely egyenlő az élek-csomópontok + az összefüggő komponensek száma.
        </para>
        <para>
            A ciklomatikus komplexitás kiszámításához egy maven plugint használtam a már megírt binfa servleten.
        </para>
        <programlisting language="java"><![CDATA[
            <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>javancss-maven-plugin</artifactId>
                    <version>2.1</version>
                </plugin>
            ]]>
          </programlisting>
        <para>
            Ha a maven pom.xml ünkbe a pluginok közé beírjuk az alábbi kódcsipetet, majd a <command>mvn site</command> és <command>mvn javancss:report</command> futtatásával a projekt könyvtárában a
            target/site mappában megtaláljuk a plugin által kiszámolt komplexitást és egyéb információkat, amelyet egy html oldal formájában tekinthetünk meg. 
        </para>
        <figure>
                <title>Ciklomatikus Komplexitás</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="img/CykloComplex.png" scale="35" />
                        </imageobject>
                    </mediaobject>
        </figure>
        <figure>
                <title>Maven</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="img/maven.png" scale="200" />
                        </imageobject>
                    </mediaobject>
        </figure>
    </section>

</chapter>                
