<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Savitar97/Prog1/tree/master/vegtelen">https://github.com/Savitar97/Prog1/tree/master/vegtelen</link>                
        </para>
        <para>
         Végtelen ciklust a legkönnyebben 3 féle képpen tudunk írni(ezek a standard formák):
        </para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        int main(){
        while(1);//végtelen ciklus while-al
        for(;;);//végtelen ciklus for-al
        do{}
        while(1);//végtelen ciklus do while segítségével
        return 0;
        }       ]]>
        </programlisting>
        <para>
            A végtelen ciklus következhet hibából, de van úgy, hogy szándékosan használunk végtelen ciklusokat például a programok menüjénél, de a program futása is egy végtelen ciklus, amelyet az X gombra kattintás szakít meg.Ha simán írunk egy végtelen ciklust az egy szálat fog kihasználni 100%-on, mindaddig amíg nem párhuzamosítjuk, ezt a:
        </para>
        <programlisting language="c"><![CDATA[
        #pragma omp parallel]]>
        </programlisting> 
        <para>
            segítségével érjük el.Ekkor a program már minden szálat képes kihasználni 100%-on. Fordítani pedig a következőképpen tudjuk:
        </para>
        <para>
            <command>gcc vegtelen3.c -o vegtelen3 -fopenmp</command>
        </para>
        <para>
            Végtelen ciklus 1 mag 100%-os használattal:
         </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/vegtelen1mag.png" scale="30" />
                </imageobject>
        </mediaobject>
        <para>Végtelen ciklus az összes mag kihasználásával:</para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/vegtelenosszesmag.png" scale="30" />
                </imageobject>
        </mediaobject>
        <para>  
            Ha azt akarjuk, hogy 0%-ot használjon a processzorból akkor azt a:
         </para>
         <programlisting language="c"><![CDATA[
        sleep();]]>
        </programlisting> 
        <para>
        használatával tudjuk elérni, amely lehetővé teszi, hogy a meghívott szálat egy meghatározott ideig "sleepeltesse". Az időt a () között adhatjuk meg másodpercben, ha 0-t adunk meg, akkor végtelen időre sleepeltethetünk. A sleep függvényt az:    
        </para>
        <programlisting language="c"><![CDATA[
        #include <unistd.h>]]>
        </programlisting>
        <para>
          könyvtár tartalmazza. Tehát a használatához megkell hívnunk.
</para> 
<mediaobject>
                <imageobject>
                    <imagedata fileref="img/vegtelen0mag.png" scale="30" />
                </imageobject>
        </mediaobject>       
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Ha a T100 as függvény létezne és megkapná a P-t paraméternek akkor igazat ad vissza. De ha a T100 asnak a T100 ast adjuk meg tehát rekurzívan hívjuk meg a T100 ast akkor azt írná ki, hogy a T100 asban nincs végtelen ciklus, pedig a bemenő argumentuma egy végtelen ciklus.Ha létezne ilyen program nem lenne szükség a teszterekre. Mellesleg ez ellentmondást ad vissza.
        </para>
        <para>
            Tanulság nem lehet jelenleg olyan programot írni, amely normálisan eldönti egy másik programról, hogy kifog -e fagyni avagy sem.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Savitar97/Prog1/blob/master/valtcser/valtcser.c">https://github.com/Savitar97/Prog1/blob/master/valtcser/valtcser.c</link> 
        </para>
        
        <para>
            Két változó értékének felcserélése többféle módon is történhet a legalapvetőbb a segédváltozó használata.Ekkor a 2 változóhoz behozunk egy ideiglenes segédváltozót, amiben valamelyik változó értékét letároljuk, majd az első változó értékét egyenlővé tesszük a másodikkal, majd a második értékét egyenlővé tesszük az ideiglenesben letárolt első változó értékével. Ez itt látható:
        </para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        int main(){
        int elso=5,masodik=3,temp;
            temp=elso;
            elso=masodik;
            masodik=temp;
        }       ]]></programlisting>
        <para>
            De ezen a módszeren kívül, lehetséges összeadás-kivonással,szorzás-osztással,vagy logikai kizáró vagy művelet segítségével felcserélni két változó értékét.    
        </para>
        <para>
            Legyen két változónk a és b. Összeadással az a-ba összeadjuk a-t és b-t. Majd az a-ból kivonjuk a b-t és ezt letároljuk b-be.Ekkor b értéke egyenlő lesz az a változó kezdeti értékével,majd az a-ból kivonjuk a b változót ekkor a értéke egyenlő lesz b kezdeti értékével, tehát felcserélődtek az értékek.Szorzás-osztással, ugyan így működik.
        </para>
        <para>
            Két változó értékét logikai operátorral a kizáró vaggyal is megcserélhetjük.
        </para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        int main(){
        int elso=5,masodik=3;
            elso=elso^masodik;
            masodik=elso^masodik;
            elso=elso^masodik;
        }       ]]></programlisting>
        <para>
        A kizáróvagy(xor) lényege, hogy csak akkor igaz ha az egyik igaz.Ez binárisan azt jelenti,hogy akkor 1 es ha ugyan azon a biten lévő érték az egyik változónál 1 es a másikban 0 ás.Az elso változó binárisan 0101 a masodik 0011 kizáró vagyot végre hajtva az elso értéke 0110 lesz, aminek az értéke 6. Majd újra kizáró vagyot végrehajtva a masodik értéke 0101 lesz, ami 5 tehát megkapta az elso ertékét. Ezután még egyszer kizáróvagy-ot használunk ekkor az elso értéke 0011 lesz, ami 10 es számrendszerbe 3. Tehát a két változó értéke felcserélődött.   
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/valtcser.png" scale="30" />
                </imageobject>
        </mediaobject>  
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <caution>
            <title>
                Tutor
            </title>
            <para>Ebben a feladatban tutoráltam Ádám Petrát.</para>
        </caution>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Savitar97/Prog1/tree/master/labda">https://github.com/Savitar97/Prog1/tree/master/labda</link>
        </para>
        <para>
         Labdapattogtatás if-el: c-ben megadtam egy maximális méretet a pályának ez az x és y változó. A labda kezdetleges koordinátáit a labdax és labday-ban tárolom. Ezen kívül kell még 2 változó, amely a labda mozgásáért felelős ez a tempx és tempy. Magát a labdát karakterként a labda változóban tárolom.
        </para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        int main(){
        char labda='o';
	int x=80,y=15,labdax=1,labday=1,tempx=1,tempy=1;
        }       ]]></programlisting>
        <para>
            A labdapattogtatást a for(;;) végtelen ciklus és egy rajzol eljárás folytonos meghívása szolgálja. A labda mozgását a koordináták temp-el való növelése szolgálja. Az if-ek segítségével érem el, hogy ha a labda eléri a pálya szélét, akkor a temp előjele változzon, így az érték csökkeni kezd, majd csökkenés után ha újra eléri a pálya szélét a -1-szeres szorzással újra pozitívba vált. A késleltetett kiírást az usleep éri el, az értéket microsec-be kell megadni és az unistd.h könyvtár tartalmazza ezt a függvényt.  
        </para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        #include <unistd.h>
        int main(){
        for(;;)
	{
		labdax+=tempx;
		labday+=tempy;
		if(x-1<=labdax)
		{
			tempx*=-1;
		}
		else if(y-1<=labday)
		{
			tempy*=-1;
		}
		else if(labdax<0)
		{
			tempx*=-1;
		}
		else if(labday<0)
		{
			tempy*=-1;
		}
		rajzol(labdax,labday,labda);
		usleep(100000);
	}
        }       ]]></programlisting>
        <para>
            If nélkül azt, hogy a labda vissza pattanjon a maradékos osztás végzi el és az abszolút érték.
        </para>
            <screen><![CDATA[
                    x=abs(szelesseg-lepteto%(2*szelesseg));
                    y=abs(tmagassag-lepteto%(2*tmagassag));
                    lepteto++;
                    ]]>
        </screen>
        <para>
            És persze szükséges mellette egy változó aminek az értékét folyamatosan növeljük és a pálya méretének 2x esével osztjuk el maradékosan, majd kivonjuk a pálya méretéből és ez határozza meg a labda koordinátáját.Tehát mondjuk egy 50 es pálya méretnél 50-1%100=49 ... így csökken egészen 0-ig majd mikor a léptető eléri az 51 et 50-51=-1 el, de ennek az abszolút értéke 1, tehát újra növekedni fog.
        </para>
        <para>
            Tapasztalat:C-ben van egy kis hiba mivel, amikor eléri a pálya tetejét a labda nem egyből pattan vissza, ez csak if-nél jelentkezik. If nélkül a két abszolút értékes függvénnyel nem jelentkezik ez a hiba.
        </para>
        <para>
            A program futás közben:
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/labda.png" scale="150" />
                </imageobject>
        </mediaobject>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Savitar97/Prog1/blob/master/szohossz/bitshift.cpp">https://github.com/Savitar97/Prog1/blob/master/szohossz/bitshift.cpp</link>
        </para>
        
        <para>
            A szóhossz megnézéséhez a bitenkénti léptetés operátort használjuk:
        <screen>
        <![CDATA[while (szam <<=1){
			cout<<szam<<'\n';
			counter++;		
        }]]>
        </screen>
            Ez annyit jelent hogy az egyest egyre jobban balra toljuk és jobbról 0-ákkal pótoljuk.
        </para>
        <para>
          Ez azt eredményezi, hogy 2-nek hatványait kapjuk és amikor eléri az int maximális méretét utána 0-t kap eredményül, mivel a bitsorozat teljesen ki 0-ázódik.Tehát a 32. lépésre, nem lesz olyan bit, amin képesek leszünk ábrázolni az 1 est.   
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/bitshift.png" scale="50" />
                </imageobject>
        </mediaobject>
        <para>
            Igazából 32 bites a szóhossz csak az elsőt nem számolja szóval 31+1.
        </para>
        <para>
            De ezen könnyen javíthatunk ha, a while helyett do while-t használunk:
        </para>
        <screen>
        <![CDATA[do{
			cout<<szam<<'\n';
			counter++;
        }while (szam <<=1);
]]>
        </screen>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/bitshiftjav.png" scale="30" />
                </imageobject>
        </mediaobject>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <caution>
            <title>
                Tutor
            </title>
            <para>Ebben a feladatban tutoráltam Ádám Petrát és Duszka Ákos Attilát.</para>
        </caution>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Savitar97/Prog1/blob/master/pagerank/pagerank.c">https://github.com/Savitar97/Prog1/blob/master/pagerank/pagerank.c</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A pagerank algoritmust a google találta ki azért, hogy megkönnyítsék a weben való keresést. Maga a pagerank egy számba sűríti a weblap értékét. A lényege, hogy minél több oldal mutat a weblapunkra annál értékesebb. Ez azért van mert, úgy gondolták a google alapítói, hogy a weboldal készítői, azért linkelnek be oldalakat mert hasznosnak találják.
        </para>
        <para>
            Ez felfogható úgy is, mint egy választás. És minden oldal képes szavazni és az, hogy valaki a mi linkünket használja olyan mintha ránk voksolna és akinek több a szavazata az van előrébb a rangsorban.
        </para>
        <para>
            Első lépésként megadjuk a kapcsolati gráfot. Tehát, hogy melyik oldal melyik oldalra mutat. Ezt egy mátrixban tároljuk le, mivel 4 honlappal dolgozunk, ezért egy 4x4 es mátrix lesz:
        </para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        #include <unistd.h>
        int main(){
        double graf[4][4] = {
                                {0.0, 0.0, 1.0 / 3.0, 0.0},
                                {1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
                                {0.0, 1.0 / 2.0, 0.0, 0.0},
                                {0.0, 0.0, 1.0 / 3.0, 0.0}
                            };
	}
        }       ]]></programlisting>
        <para>Azért double mivel a pagerank nem feltétlenül csak egész szám lehet.</para>
        <para>Ezután létrehozunk még 2 db egydimenziós tömböt. Az egyikben a végleges pagerankot tároljuk míg a másikban az ideiglenest. Az ideiglenes vektorban minden oldal pagerankját 1/4-re állítjuk mivel 4 oldal van.</para>
        <para>Majd indítunk egy végleges ciklust,amely addig fut, amíg a pagerank kisebb nem lesz, mint a dumping factort az az a csillapító értéket, most ez 0.00001-ben lett meghatározva</para>
        <para>A végtelen ciklus elején áttöltjük az ideiglenes pagerankból az értékeket a végleges pagerank tömbünkbe.</para>
        <para>Ezt követően indítunk egy egybeágyazott for ciklust, amely a letárolt kapcsolati gráfos tömb(a szétosztott szavazatokat tárolja) sorait megszorozza a jelenlegi pagerankkal és a sorok összegét, mármint egyessével egy értékbe tömöríti és azt betölti az ideiglenes pagerankba és ez addig folytatódik, amíg kinem lép a végtelen ciklusból.</para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        #include <unistd.h>
        #define dumping_factor 0.0001
            
        int main(){
        while(1)
            {
                for(i=0;i<4;i++)
		{
			PR[i] = PRt[i];
		}
                for (i=0;i<4;i++)
		{
			double temp=0;
			for (j=0;j<4;j++)
				temp+=graf[i][j]*PR[j];
			PRt[i]=temp;
		}

                if ( dif(PR,PRt, 4) < dumping_factor)
		break;
            }
	}
        }       ]]></programlisting>
        <para>A távolság függvény paraméterként megkapja a végleges pagerankot és az ideiglenest és, hogy hány db oldal van. Majd kivonja a pagerank i-edik eleméből az ideiglenes pagerank i-edik elemének értékét és ezek abszolút értékét összeadja a tav nevű változóban, amely a függvény visszatérési értéke lesz.</para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        #include <unistd.h>
        
        double dif(double pagerank[],double pagerank_temp[],int db)
{
	double  dif= 0.0;
	int i;
	for(i=0;i<db;i++)
		{
			dif +=fabs(pagerank[i] - pagerank_temp[i]);
		}
	return dif;
}
       ]]></programlisting>
       <para>Érdekesség ha az egyik oldal nem mutat semmire.Tehát ha az utolsó oszlopot mondjuk teljesen ki 0-ázzuk akkor a pagerank is kinullázódna ha 2 tizedes jegyik néznénk az értéket.</para>
       <mediaobject>
                <imageobject>
                    <imagedata fileref="img/nulla.png" scale="50" />
                </imageobject>
        </mediaobject>
        <para>A helyes megoldás:</para>
           <mediaobject>
                <imageobject>
                    <imagedata fileref="img/elso.png" scale="50" />
                </imageobject>
            </mediaobject>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <caution>
            <title>
                Tutorált
            </title>
            <para>Ebben a feladatban tutorált Duszka Ákos Attilát.</para>
        </caution>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para>
            Prímnek nevezzük azokat a számokat, amelyek csak 1-el és önmagukkal oszthatók.Ikerprímek azok a prímszámok, amelyek különbsége 2.
        </para>
        <para>
            A program egy megadott x értékig kikeresi a prímeket. Majd megnézi a köztük lévő diferenciát (diff),ahol ez a diferencia 2, annak az indexét egy tömbben(idx) tárolja(de csak az ikerprímpár első tagjának indexét, ezért kell a t2primes-nál a +2) tehát a prímek közül kiszűri, hogy melyek ikerprímek.
        </para>
        <programlisting language="R"><![CDATA[
         primes = primes(x)
        diff = primes[2:length(primes)]-primes[1:length(primes)-1]
        idx = which(diff==2)
        t1primes = primes[idx]
        t2primes = primes[idx]+2
       ]]></programlisting>
        <para>
            Majd az rt1plust2-ben összeadjuk ezeknek a reciprokát végül a függvényünk visszatérési értéke az rt1plust2-nek az összege.
        </para>
        <para>
            A seq függvény hasonló a for ciklushoz seq(from, to, by= ), from,hogy mettől(13) to, hogy meddig(1000000) és a by, hogy milyen lépésszámmal(10000). Ez határozza meg az x tengely beosztását.
        </para>
        <para>
            A sapply függvény az x ekhez rendeli egyessével az stp függvényben kapott értékeket y-ként.
        </para>
        <para>
            Végül a plot kirajzolja a függvényt.
         </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/Rplot.png" scale="100" />
                </imageobject>
        </mediaobject>
        <para>
            A képen látható, hogy a párosprímek reciprokának összege egyre jobban tart a 2 felé,tehát egy véges értékhez konvergál, amely a Brun konstans azaz a Brun tétel teljesül.
        </para>
        <para>
            De ezzel még mindig nem tudjuk eldönteni, hogy végtelen vagy véges számú prímszám van mert úgysem lépik át ezt a határt csak megközelítik.
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <caution>
            <title>
                Tutorált
            </title>
            <para>Ebben a feladatban tutorál Duszka Ákos Attilát.</para>
        </caution>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A Monty Hall probléma lényegében 3 ajtó közül kell kiválasztanunk a nyerteset viszont ha nem találjuk el akkor újra kezdhetjük.
        </para>
        <para>
            Annak a valószínűsége, hogy egyből a jó ajtót találjuk el 1/3 és az, hogy rosszat 2/3. Viszont a választás után a 3 ajtó közül a műsorvezető kinyit egyet, amelyik mögött nem a nyeremény van.(A játékvezető tudja melyik ajtó mögött van a nyeremény) Majd ezután megkérdi a játékost, hogy szeretne -e változtatni a választásán. Elvileg az ajtó nyitása után a nyerési arányunk redukálódik 1/2-re, hogy nyerünk és 1/2-re, hogy vesztünk. A nagy kérdés itt az, hogy megéri -e váltanunk.Ez a program pont ezt szimulálja.
        </para>
        <para>
            A kísérletek száma változóban definiáljuk, hogy hányszor fusson le a kísérlet.Azaz a minták száma.
        </para>
        <para>
            A kiserlet és a jatekos tömbök, amelyeket 1 és 3 közé eső számokkal tölt fel a sample. A műsorvezető egy vektor amelyet ugyan olyan méretűre deklarálunk mint a kísérletek száma.
        </para>
        <para>
            Egy for ciklussal bejárjuk a tömböt és ha a játékos eltalálja, hogy melyik ajtó mögött van akkor a mibol tömbbe a másik két ajtó lehetősége kerül.Ha nem találja el akkor csak egyetlen érték az az ajtó ami mögött nincs semmi,de nem választotta a játékos.
        </para>
        <para>
            Ezután a műsorvezető úgymond kinyit egy ajtót tehát választ egyet a mibol tömbből.
        </para>
        <para>
            Majd lefut egy feltétel, amely megmutatja hányszor nyerne a játékos ha nem változtat.Tehát a tömbbe azok az indexek kerülnek amikor a jatekos és a kiserlet megegyezik.
        </para>
        <para>
            Létrehozunk egy új vektort amiben megváltoztatjuk a választást úgy, hogy kivételként adjuk a műsorvezető által kinyitott ajtót és a játékost által választottat.
        </para>
        <para>
            Végül lefuttatunk egy ugyan ilyen feltételes vizsgálatot, hogy mi lett volna ha mindig változtatunk. És itt is ugyan úgy letároljuk egy tömbbe, hogy mely indexeknél nyert a játékos. És kiiratjuk a statisztikát, amely megmutatja, hogyan járnánk jobban ha mindig változtatnánk vagy ha tartózkodnánk az először választott ajtóhoz.
        </para>
        <para>
            Egy példa a program futására:
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/monty.png" scale="50" />
                </imageobject>
        </mediaobject>
    </section>

</chapter>                
