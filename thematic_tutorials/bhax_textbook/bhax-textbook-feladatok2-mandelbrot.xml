<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Reverse engineering UML osztálydiagram</title>
        <para>
			UML osztálydiagram rajzolása az első védési C++ programhoz. Az osztálydiagramot a forrásokból
			generáljuk (pl. Argo UML, Umbrello, Eclipse UML) Mutassunk rá a kompozíció és aggregáció
			kapcsolatára a forráskódban és a diagramon, lásd még: https://youtu.be/Td_nlERlEOs.
			https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_6.pdf (28-32 fólia)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
         A diagrammot ugyebár a binfás védési programunkról csináltuk, amelyet még prog1-en használtunk.
        </para>
        <programlisting language="java"><![CDATA[
            //gcc pointer2.cpp -o binarytree -lm -lstdc++
#include <iostream>		
#include <cmath>		
#include <fstream>	
#include <algorithm>
#include <utility>

class LZWBinFa
{
public:
  
  LZWBinFa()
  {
      gyoker = new Csomopont();
      fa=gyoker;
  }
   ~LZWBinFa ()
  {
    szabadit (gyoker->egyesGyermek ());
    szabadit (gyoker->nullasGyermek ());
    delete gyoker;
  }
  
  
  
  LZWBinFa ( LZWBinFa && regi ){
  
      gyoker = nullptr;
      
      *this = std::move(regi);

      
  }
  
  LZWBinFa & operator= (LZWBinFa && regi){
      
      std::swap(gyoker, regi.gyoker);

      return *this;
}

  void operator<< (char b)
  {

    if (b == '0')
      {
	
	if (!fa->nullasGyermek ())	
	  {
	    Csomopont *uj = new Csomopont ('0');
	    fa->ujNullasGyermek (uj);
	    fa = gyoker;
	  }
	else			
	  {
	    
	    fa = fa->nullasGyermek ();
	  }
      }
    else
      {
	if (!fa->egyesGyermek ())
	  {
	    Csomopont *uj = new Csomopont ('1');
	    fa->ujEgyesGyermek (uj);
	    fa = gyoker;
	  }
	else
	  {
	    fa = fa->egyesGyermek ();
	  }
      }
  }
  
  void kiir (void)
  {
    
    melyseg = 0;
    kiir (gyoker, std::cout);
  }
  
  int getMelyseg (void);
  double getAtlag (void);
  double getSzoras (void);

  friend std::ostream & operator<< (std::ostream & os, LZWBinFa & bf)
  {
    bf.kiir (os);
    return os;
  }
  void kiir (std::ostream & os)
  {
    melyseg = 0;
    kiir (gyoker, os);
  }

private:
  class Csomopont
  {
  public:

  Csomopont (char b = '/'):betu (b), balNulla (0), jobbEgy (0)
    {
    };
    ~Csomopont ()
    {
    };
    Csomopont (const Csomopont& elem){
        
        betu = elem.getBetu();
        balNulla = new Csomopont;
        jobbEgy = new Csomopont;
        *balNulla= *(elem.nullasGyermek());
        *jobbEgy= *(elem.egyesGyermek());
    }
    
    Csomopont & operator= (const Csomopont& elem){
        
        betu = elem.getBetu();
        Csomopont* ujBal = new Csomopont();
        *ujBal = *(elem.nullasGyermek());
        delete balNulla;
        balNulla = ujBal;
        Csomopont* ujJobb = new Csomopont();
        *ujJobb = *(elem.egyesGyermek());
        delete jobbEgy;
        jobbEgy = ujJobb;
        
        return *this;
    }
   
    Csomopont *nullasGyermek () const
    {
      return balNulla;
    }
    
    Csomopont *egyesGyermek () const
    {
      return jobbEgy;
    }
  
    void ujNullasGyermek (Csomopont * gy)
    {
      balNulla = gy;
    }
    
    void ujEgyesGyermek (Csomopont * gy)
    {
      jobbEgy = gy;
    }
   
    char getBetu () const
    {
      return betu;
    }

  private:
   
    char betu;
    Csomopont *balNulla;
    Csomopont *jobbEgy;
    
  };

  Csomopont *fa;
  int melyseg, atlagosszeg, atlagdb;
  double szorasosszeg;
  LZWBinFa (const LZWBinFa& binfa);

  void kiir (Csomopont * elem, std::ostream & os)
  {
    
    if (elem != NULL)
      {
	++melyseg;
	kiir (elem->nullasGyermek (), os);
	for (int i = 0; i < melyseg; ++i)
	  os << "---";
	os << elem->getBetu () << "(" << melyseg - 1 << ")" << std::endl;
	kiir (elem->egyesGyermek (), os);
	--melyseg;
      }
  }
  void szabadit (Csomopont * elem)
  {
    if (elem != NULL)
      {
	szabadit (elem->egyesGyermek ());
	szabadit (elem->nullasGyermek ());
	delete elem;
      }
  }

protected:			
  Csomopont *gyoker;
  int maxMelyseg;
  double atlag, szoras;

  void rmelyseg (Csomopont * elem);
  void ratlag (Csomopont * elem);
  void rszoras (Csomopont * elem);

};

int
LZWBinFa::getMelyseg (void)
{
  melyseg = maxMelyseg = 0;
  rmelyseg (gyoker);
  return maxMelyseg - 1;
}

double
LZWBinFa::getAtlag (void)
{
  melyseg = atlagosszeg = atlagdb = 0;
  ratlag (gyoker);
  atlag = ((double) atlagosszeg) / atlagdb;
  return atlag;
}

double
LZWBinFa::getSzoras (void)
{
  atlag = getAtlag ();
  szorasosszeg = 0.0;
  melyseg = atlagdb = 0;

  rszoras (gyoker);

  if (atlagdb - 1 > 0)
    szoras = std::sqrt (szorasosszeg / (atlagdb - 1));
  else
    szoras = std::sqrt (szorasosszeg);

  return szoras;
}

void
LZWBinFa::rmelyseg (Csomopont * elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      if (melyseg > maxMelyseg)
	maxMelyseg = melyseg;
      rmelyseg (elem->egyesGyermek ());
      rmelyseg (elem->nullasGyermek ());
      --melyseg;
    }
}

void
LZWBinFa::ratlag (Csomopont * elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      ratlag (elem->egyesGyermek ());
      ratlag (elem->nullasGyermek ());
      --melyseg;
      if (elem->egyesGyermek () == NULL && elem->nullasGyermek () == NULL)
	{
	  ++atlagdb;
	  atlagosszeg += melyseg;
	}
    }
}

void
LZWBinFa::rszoras (Csomopont * elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      rszoras (elem->egyesGyermek ());
      rszoras (elem->nullasGyermek ());
      --melyseg;
      if (elem->egyesGyermek () == NULL && elem->nullasGyermek () == NULL)
	{
	  ++atlagdb;
	  szorasosszeg += ((melyseg - atlag) * (melyseg - atlag));
	}
    }
}


void
usage (void)
{
  std::cout << "Usage: lzwtree in_file -o out_file" << std::endl;
}

int
main (int argc, char *argv[])
{

  if (argc != 4)
    {
      usage ();
      return -1;
    }

  char *inFile = *++argv;

  if (*((*++argv) + 1) != 'o')
    {
      usage ();
      return -2;
    }

  std::fstream beFile (inFile, std::ios_base::in);

  if (!beFile)
    {
      std::cout << inFile << " nem letezik..." << std::endl;
      usage ();
      return -3;
    }

  std::fstream kiFile (*++argv, std::ios_base::out);

  unsigned char b;		
  LZWBinFa binFa,binFa2;		


  while (beFile.read ((char *) &b, sizeof (unsigned char)))
    if (b == 0x0a)
      break;

  bool kommentben = false;

  while (beFile.read ((char *) &b, sizeof (unsigned char)))
    {

      if (b == 0x3e)
	{			// > karakter
	  kommentben = true;
	  continue;
	}

      if (b == 0x0a)
	{			// újsor 
	  kommentben = false;
	  continue;
	}

      if (kommentben)
	continue;

      if (b == 0x4e)		// N betű
	continue;

      for (int i = 0; i < 8; ++i)
	{
	  if (b & 0x80)
	    binFa << '1';
	  else
	    binFa << '0';
	  b <<= 1;
	}

    }


  kiFile << binFa;
  kiFile << "depth = " << binFa.getMelyseg () << std::endl;
  kiFile << "mean = " << binFa.getAtlag () << std::endl;
  kiFile << "var = " << binFa.getSzoras () << std::endl;
  kiFile << &binfa
  binFa2=std::move(binFa);
  kiFile<<"\n Mozgatás után binFa:"<< std::endl;
  kiFile << binFa;
  kiFile << "depth = " << binFa.getMelyseg () << std::endl;
  kiFile << "mean = " << binFa.getAtlag () << std::endl;
  kiFile << "var = " << binFa.getSzoras () << std::endl;
  kiFile  << "\nMozgatás után a binFa2"<< std::endl;
  kiFile<<binFa2;
  kiFile << "depth = " << binFa2.getMelyseg () << std::endl;
  kiFile << "mean = " << binFa2.getAtlag () << std::endl;
  kiFile << "var = " << binFa2.getSzoras () << std::endl;

  kiFile.close ();
  beFile.close ();

  return 0;
}

            ]]>
          </programlisting>
        <para>
        	Asszociáció: Egyetlen vonallal jelöljük és középre írjuk az asszociáció nevét.Példa: A foglalás és a szállás. A foglalás lefoglalja a szállást. Tehát itt az asszociáció neve a lefoglal. És kis nyíl fejjel jelöljük az irányt. Ezen kívül szerepneveket is megadhatunk, hogy hogyan vesz részt a kapcsolatban a két fél. Példa egy cégnél a személy munkavállalóként vesz részt a kapcsoaltban, míg a cég munkáltatóként. Itt is ugyan úgy jelölhetünk multiplicitást. Például egy cég több alkalmazottat is foglalkoztat általában mivel van egy kötelező létszám amit megkell haladnia. És lehet olyan, hogy azzal nem muszály foglalkoznunk a modellünkben, hogy a munkavállalónknak van -e több munkahelye.
        	Az asszociációnak van két speciális fajtája a kompozíció és az aggregáció.
        	Aggregáció:az aggregáció jele az üres rombusz. Az aggregáció tartalmazást jelöl. Tehát a rombuszt a tartalmazó oldalára tesszük. Például egy vállalatnak lehet egy vagy több részlege. Sokan semmitmondónak tekintik és nem ajánlják a használatát.
       		Kompozíció: Jelölése fekete tömött rombusz.Kompozíció esetén két lényeges fogalom van. Az első az, hogy a tartalmazott objektum pontosan egy tartalmazó objektumhoz tartozik. Vagyis egy tartalmazott objektumot nem tartalmazhat több objektum, tehát nincs megosztás. A másik pedig az, hogy a tartalmazott és a tartalmazó együtt jön létre és együtt is szűnik meg. A kompozíciót ugyan úgy implementáljuk, mint az asszociációt, csak ilyenkor a destruktorban megkell írnunk a felszabadító kódot és a konstruktorban a létrehozó kódrészeletet.
        </para>
        <para>
            Tehát a közös közöttük, hogy mindekettő az asszociáció egy speciális esete és, hogy mindkettő tartalmazást jelöl. Az ábránkon két kompozíciót látunk. Ez azt jelenti, hogy a tartalmazott önmagában nem tud létezni, csak valaminek a részeként. Tehát a csomópont csak a binfa részeként létezhet. És mivel a nyíl átvan húzva, így ez nem navigáló asszociáció.Ez azt jelenti, hogy a binfából mindig képezhető csomópont, de csomópontból nem állítható vissza a binfa.
        </para>
        <figure>
            <title>UML Vedes</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="img/UMLVedes.png" scale="200" />
                    </imageobject>
                </mediaobject>
        </figure>
    </section>        

    <section>
        <title>Forward engineering UML osztálydiagram</title>
        <para>
           UML-ben tervezzünk osztályokat és generáljunk belőle forrást! 
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Savitar97/Prog2/tree/master/uml-regenerate">https://github.com/Savitar97/Prog2/tree/master/uml-regenerate</link>              
        </para>
        <para>
            A forward engineering az, amikor nem a kész kódból generálunk UML diagrammot hanem fordítva. Tehát először elkészítjük a diagrammot majd képesek vagyunk belőle kódot generálni.
            Én a Visual Paradigmot használtam ehhez.
        </para>
        <para>
            Én most visszafejtem az előző feladatban elkészített első védési feladatos UML diagrammot.
        </para>
        <para>
            Vegyük példának a csomópont osztályt.
        </para>
        <programlisting language="java"><![CDATA[
            class Csomopont
  {
  public:

  Csomopont (char b = '/'):betu (b), balNulla (0), jobbEgy (0)
    {
    };
    ~Csomopont ()
    {
    };
    Csomopont (const Csomopont& elem){
        
        betu = elem.getBetu();
        balNulla = new Csomopont;
        jobbEgy = new Csomopont;
        *balNulla= *(elem.nullasGyermek());
        *jobbEgy= *(elem.egyesGyermek());
    }
    
    Csomopont & operator= (const Csomopont& elem){
        
        betu = elem.getBetu();
        Csomopont* ujBal = new Csomopont();
        *ujBal = *(elem.nullasGyermek());
        delete balNulla;
        balNulla = ujBal;
        Csomopont* ujJobb = new Csomopont();
        *ujJobb = *(elem.egyesGyermek());
        delete jobbEgy;
        jobbEgy = ujJobb;
        
        return *this;
    }
   
    Csomopont *nullasGyermek () const
    {
      return balNulla;
    }
    
    Csomopont *egyesGyermek () const
    {
      return jobbEgy;
    }
  
    void ujNullasGyermek (Csomopont * gy)
    {
      balNulla = gy;
    }
    
    void ujEgyesGyermek (Csomopont * gy)
    {
      jobbEgy = gy;
    }
   
    char getBetu () const
    {
      return betu;
    }

  private:
   
    char betu;
    Csomopont *balNulla;
    Csomopont *jobbEgy;
    
  };
            ]]>
          </programlisting>
    <para>
        Ez az eredeti kód. És most nézzük meg mi lesz belőle miután vissza fejtettük.
    </para>
    <programlisting language="java"><![CDATA[
        #ifndef CSOMOPONT_H
#define CSOMOPONT_H

class Csomopont {

private:
	char betu;
	Csomopont* balNulla;
	Csomopont* jobbEgy;

public:
	Csomopont(char b = '/');

	void ~Csomopont();

	Csomopont(const Csomopont& elem);

	Csomopont* nullasGyermek();

	Csomopont* egyesGyermek();

	void ujNullasGyermek(Csomopont* gy);

	void ujEgyesGyermek(Csomopont* gy);

	char getBetu();
};

#endif// eddig tart a csomopont.h
#include "Csomopont.h"

Csomopont::Csomopont(char b) {
	// TODO - implement Csomopont::Csomopont
	throw "Not yet implemented";
}

Csomopont::Csomopont(const Csomopont& elem) {
	// TODO - implement Csomopont::Csomopont
	throw "Not yet implemented";
}

Csomopont* Csomopont::nullasGyermek() {
	// TODO - implement Csomopont::nullasGyermek
	throw "Not yet implemented";
}

Csomopont* Csomopont::egyesGyermek() {
	// TODO - implement Csomopont::egyesGyermek
	throw "Not yet implemented";
}

void Csomopont::ujNullasGyermek(Csomopont* gy) {
	// TODO - implement Csomopont::ujNullasGyermek
	throw "Not yet implemented";
}

void Csomopont::ujEgyesGyermek(Csomopont* gy) {
	// TODO - implement Csomopont::ujEgyesGyermek
	throw "Not yet implemented";
}

char Csomopont::getBetu() {
	return this->betu;
}

        ]]>
      </programlisting>
      <para>
          Láthatjuk,hogy elég jól visszagenerálta kivéve ugyebár a függvények törzsét. Habár azt honnan tudná vissza generálni? Ez csak egy vázlatból készített kód.
          De ezzel látható, hogy kiindulhatunk innen is, hogy UML-ben tervezzük meg az osztályt.
      </para>
    </section>        
    <section>
        <title>Egy esettan</title>
        <para>
            A BME-s C++ tankönyv 14. fejezetét (427-444 elmélet, 445-469 az esettan) dolgozzuk fel!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Az UML jelentősége, hogy jelenleg a szoftverfejlesztés egyetlen szabványos modellező nyelve.Főként az UML osztálydiagrammot használjuk. Mivel ez írja le az osztályokat, interfészeket és a típusukat. Ezenkívül ezek kapcsolatait.
            Az UML modellező nyelvben a diagrammok dobozokból, vonalakból, ikonokból és szöveges információkból állnak.
            Az UML diagrammok legfontosabb elemei az osztályok, amelyet téglalappal jelölünk. A téglalapot 3 különböző részre osztjuk. Az első rész az osztály nevét adja meg. A második részbe kerülnek a változók és ezek típúsai. Az utolsó és egyben 3. részben az osztály metódusait soroljuk fel. Az attribútumok szintaxisa a következőképpen alakul:elsőként a láthatóság, amelyet követ a változó neve. Ezt követően jön a típusa és multiplicitása, amelyet egy = jel követ. Az = jel után adjuk meg a változó értékét ha van. A legvégén pedig a tulajdonságait írhatjuk fel {}-be zárva. A tulajdonság lehet például az, hogy a változó csak olvasható. Ez jelenti azt,hogy konstans változóról van szó.Ha egy attribútum statikus akkor azt aláhúzással jelöljük.Ha egy taggfüggvény a konstans akkor a query tulajdonsággal adjuk meg.
        </para>
        <para>
        	Beszéljünk a láthatósági szintek jelöléséről:
        	A + jelenti a publicot, a - a private és a # a protected.Ezen kívül van még egy a package, amelyet a ~ jelöl.Ez C++-ban nincs, de javaban már igen.
        </para>
        <para>
        	Az virtuális vagy másnéven absztrakt műveleteket dőlt betűvel vagy {absztrakt} tulajdonsággal látjuk el.Ha minden művelet absztrakt vagy nincs attribútuma az osztálynak akkor azt az osztály névszakaszában az interface kulcsszóval jelöljük.
        </para>
        <para>
        	Kapcsolatok:
        </para>
        <para>
        	Asszociáció: Egyetlen vonallal jelöljük és középre írjuk az asszociáció nevét.Példa: A foglalás és a szállás. A foglalás lefoglalja a szállást. Tehát itt az asszociáció neve a lefoglal. És kis nyíl fejjel jelöljük az irányt. Ezen kívül szerepneveket is megadhatunk, hogy hogyan vesz részt a kapcsolatban a két fél. Példa egy cégnél a személy munkavállalóként vesz részt a kapcsoaltban, míg a cég munkáltatóként. Itt is ugyan úgy jelölhetünk multiplicitást. Például egy cég több alkalmazottat is foglalkoztat általában mivel van egy kötelező létszám amit megkell haladnia. És lehet olyan, hogy azzal nem muszály foglalkoznunk a modellünkben, hogy a munkavállalónknak van -e több munkahelye.
        	Az asszociációnak van két speciális fajtája a kompozíció és az aggregáció.
        </para>
        <para>
        	Aggregáció:az aggregáció jele az üres rombusz. Az aggregáció tartalmazást jelöl. Tehát a rombuszt a tartalmazó oldalára tesszük. Például egy vállalatnak lehet egy vagy több részlege. Sokan semmitmondónak tekintik és nem ajánlják a használatát.
       	</para>
       	<para>
       		Kompozíció: Jelölése fekete tömött rombusz.Kompozíció esetén két lényeges fogalom van. Az első az, hogy a tartalmazott objektum pontosan egy tartalmazó objektumhoz tartozik. Vagyis egy tartalmazott objektumot nem tartalmazhat több objektum, tehát nincs megosztás. A másik pedig az, hogy a tartalmazott és a tartalmazó együtt jön létre és együtt is szűnik meg. A kompozíciót ugyan úgy implementáljuk, mint az asszociációt, csak ilyenkor a destruktorban megkell írnunk a felszabadító kódot és a konstruktorban a létrehozó kódrészeletet.
        </para>
        <para>
            Esettanulmány:
        </para>
        <para>
            A feladat egy számítógépek és komponenseinek eladásával foglalkozó kereskedés számára, egy olyan alkalmazás elkészítése,
            amely nyilvántartja a kereskedésben lévő alkatrészeket és konfigurációkat. A programunknak tartalmaznia kell a termékek áruból való betöltését,
            ezek képernyőre történő listázását, valamint állományba való kiírását és ezen kívül az árak kialakítását. A rendszert úgy kell kiépítenünk, hogy a jövőbeli termékcsaládokat is támogassa. Ezt úgy érjük el, hogy megvalósítunk egy keretrendszert osztálykönyvtár formában.
            Az erre vonatkozó követelmények a következők:
        </para>  
        <simplelist>
            <member>A keretrendszernek ne kelljen kiadni a forráskódját és úgy lehessen felhasználni.</member>
            <member>Támogatnia kell az adatfolyamból való feltöltését és kiirását a termékeknek.</member>
            <member>A termékek fontos attribútumai:beszerzési ár,beszerzési dátum, név és típus.Az aktuális ár függvénnyel számolandó. </member>
            <member>Egy termék lehet elemi vagy összetett.Ha összetett akkor több termékből épül fel.</member>
        </simplelist>
        <para>
            A támogatott termékek a következők(zárójelben a tulajdonságaikkal):kijelzők,merevlemez,konfigurációk. A konfigok összetett termékek.
        </para>
        <para>
            A keretrendszer osztályait egy ProductInvertoryLib osztálykönyvtárba fogjuk össze. Kiterjesztése .lib.
            A termékek reprezentálása: létrehozunk egy Product osztályt, amelybe összegyűjtsük a termékek közös tulajdonságait, mivel majd minden terméket ebből származtatunk le.
            Amint a könyvben lévő ábrán is lássuk minden osztály asszociációval kapcsolódik a Product osztályhoz. A Product osztály a tartalmazó osztály tehát ide kerül az üres rombusz.
            A product osztályban 3 tagváltozó van ezek protected láthatósági szinttel rendelkeznek. Ezek a következők beszerzési dátum, beszerzési ár, név. Ezek más környezetben("külvilág") számára csak olvashatók. Ezt a get metódusok segítségével érjük el. Emellett vannak metódusaink a termék árának kiszámítására és a termék korának megállapítására.
            Viszont az ár kiszámítása termékfüggő, ezért ezt csak virtualként definiáljuk, amelyet a leszármaztatott osztályok majd felül definiálnak. Emellett minden tagosztály tartalmaz egy típusnevet és egy egy karakterből álló kódot ezek lekérdezésére a Product osztály szintén tartalmaz metódust. Emellett tartalmaz egy Print metódust, amely a kiiratásért felelős, ez a termék adatait jeleníti meg a kimeneten.
        </para>
        <para>
            A termékek nyilvántartásához létrehozunk egy productinvertory osztályt a nyilvántartott termékekre egységesen termékként hivatkozik. Tehát ezt egy nyíllal jelöljük, amely fölé felé írjuk a hivatkozás nevét. És a kapcsolat típusa egy a többhöz azaz az invertoryba több termék kapcsolódik. Létrehozunk ezután egy ProductFactory és egy ComputerProductFactory osztályt. A productfactory és a product között szintén egy a többhöz kapcsolat van. A computer productfactory pedig a productfactoryval van aggregációban. A productfactory-t használjuk arra, hogy biztosítsa a keretrendszerünk általánosságát. Azaz, hogy úgy hozzunk létre specifikus terméket, hogy nevüket nem szerepeltetjük a keretrendszer kódjában.
            Az esettanulmány UML ábrája:
        </para>
        <figure>
            <title>UML Esettanulmány a könyvből</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="img/Esettanulmany.png" scale="200" />
                    </imageobject>
                </mediaobject>
        </figure>
        <figure>
          <title>UML Esettanulmány a könyvből futtatva</title>
              <mediaobject>
                  <imageobject>
                      <imagedata fileref="img/Esettan2.png" scale="200" />
                  </imageobject>
              </mediaobject>
      </figure>
    </section>
    <section>
        <title>BPMN</title>
        <para>
            Rajzoljunk le egy tevékenységet BPMN-ben!
			https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_7.pdf (34-47 fólia)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            A BPMN= Business Process Management Notation. Az eseményeket körrel jelöljük. Események lehetnek a start és a stop. A tevékenységeket lekerekített téglalappal jelöljük.
            Ezek lehetnek atomiak és összetettek. Az átjárókat rombusszal jelöljük. Az átjárók logikai kapuk.
        </para>
        <para>
            Összeköttetések:
            Nyilakkal jelöljük őket. A sima fekete nyíl jelöli a tevékenység folyamatot. Tehát, hogy a tevékenységek milyen sorrendben hajtódnak végre.
            Az üzenetet a szaggatott nyíl jelöli ez információ csere két független folyamat között. Az asszociációt pontozott nyíllal jelöljük. Ez jelöli az adat,szöveg stb. hozzárendeléseket.
        </para>
        <para>
            A tagolás: Pool:A résztvevőket jelöli. Jele egy nagy téglalap és szerepel benne a résztvevő megnevezése. Ebbe tesszük a résztvevő cselekvési folyamatát.
            Sáv: A tevékenységek csoportosítása.
        </para>
        <para>
            Artifact:Adat objektum:jele egy mappa.Szimbolikus token.
            Csoport:tevékenységek csoportosítása jele: a szaggatott lekerekített téglalap.
        </para>
        <figure>
            <title>BPMN</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="img/BPMN.png" scale="200" />
                    </imageobject>
                </mediaobject>
        </figure>
        <para>
            Az ábra létrehozásához a Visual Paradigm-ot használtam. Az esettanon a betegség esetén való háziorvoshoz fordulás látható.
        </para>
        <para>
            Ugyebár minden ott kezdődik, hogy betegek leszünk aztán elmegyünk az orvoshoz. Az orvos egyessével szólítja a betegeket, tehát várunk addig amíg sorra nem kerülünk.
            Ha minket szólít az orvos akkor bemegyünk. Majd a vizsgálat következik. Ugyebár az orvos és a beteg ilyenkor kommunikál ezért messagek vannak az orvos és beteg között.
            Az ábrát bonyolítani lehetne azzal, hogy az háziorvosoknak általában van asszisztensük. Ekkor létrehoztunk volna egy sávot és bele két pool-t. Majd a betegek behívását nem az orvos végezné,hanem az asszisztens.
        </para>
    </section>
    <section>
    	<title>BPEL Helló, Világ! - egy visszhang folyamat</title>
		<para>
		Egy visszhang folyamat megvalósítása az alábbi teljes „videó tutoriál” alapján:
		https://youtu.be/0OnlYWX2v_I
		</para>
    </section>
    <section>
        <title>TeX UML</title>
        <para>
            Valamilyen TeX-es csomag felhasználásával készíts szép diagramokat az OOCWC projektről (pl.
use case és class diagramokat).
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Savitar97/Prog2/tree/master/Latex">https://github.com/Savitar97/Prog2/tree/master/Latex</link>               
        </para>
        <para>
            A feladat megoldásához a visual paradigm-ot használtam arra, hogy egy vázlatot készítsek, amelyet majd texben megvalósítok.
            A TeX-es oldalról a tikzuml-t használtam. A használatának a leírását a következő linken találjuk:<link xlink:href="https://perso.ensta-paristech.fr/~kielbasi/tikzuml/var/files/doc/tikzumlmanual.pdf">https://perso.ensta-paristech.fr/~kielbasi/tikzuml/var/files/doc/tikzumlmanual.pdf</link>.
            Igazából a feladat nagy része a pepecs munkával telt. Beigazítani az osztály blokkokat és beméretezni őket. Viszont én például aki alig használt eddig latexet elég sokat tanultam belőle.
        </para>
        <programlisting language="java"><![CDATA[
          \usepackage{tikz-uml}
          ]]>
        </programlisting>
        <para>
          A fent lévő packaget kell behúznunk.
          Osztály létrehozásának szintaxisa a következő:
        </para>
        <programlisting language="java"><![CDATA[
          \umlclass[tulajdonságok például a típusleírás vagy x és y]{class név}
          {
            változók blokkja
            pl.: x:int és mindig "\\"-el választjuk el. 
            Arra figyeljünk oda, hogy az underscore használatához használnunk kell a következő packaget:\usepackage{underscore}
            a destruktor jelénél a \~{}-t az &-eknél a \&-t a #-nél szintén a \#-t.
          }
          {metódusok blokkja}
          ]]>
        </programlisting>
        <para>
          A kapcsolatoknál aggregáció, asszociáció stb használata a következő:
        </para>
        <programlisting language="java"><![CDATA[
          Nyíl nélküli irányítatlan asszociáció  pl:\umlassoc{CarType}{Car}
          Nyilazott asszociáció \umluniassoc{CarType}{Car}
          Agregáció:\umlaggreg {ShmClient}{MyShmClient} A tartalmazó osztályt írjuk először majd utána a tartalmazottat.Fehér rombusz a jele a tartalmazó felől.
          Öröklődés \umlinherit {ShmClient}{MyShmClient} Az UML-ben általánosításként ismerjük. Jele egy kitöletetlen, zárt nyílvégű nyíl.Amely a leszármaztatottól mutat az ős felé.
          ]]>
        </programlisting>
        <figure>
          <title>Latex OOCWC diag</title>
              <mediaobject>
                  <imageobject>
                      <imagedata fileref="img/Latexdiag.png" scale="200" />
                  </imageobject>
              </mediaobject>
      </figure>
    </section>

</chapter>                
