<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gutenberg!</title>
        <keywordset>
            <keyword/>
        </keywordset>
        <cover>
            <para>
                Programozás tankönyvek rövid olvasónaplói.
            </para>
        </cover>
    </info>
    <section>
        <title>Programozási alapfogalmak</title>
        <para>         
            <citation>PICI</citation>       
        </para>
        <para>
            A megírt programokat "forrásszövegnek" nevezzük. A nyelvtani szabályai a forrásszövegeknek a szintaktikai szabályok, míg a tartalmi szabályokat a szemantika adja meg.
            A forrásszöveget a fordítóprogram alakítja gépi kóddá, amelyet a processzor feltud dolgozni. A fordító program végzi tehát a kód szemantikai,szintaktikai,lexikális vizsgálatát és a kód generálását a szemantikai hibát nem mindig veszi észre mivel lehet, hogy olyan hibát vétettünk, amely formailag helyes csak nem a várt eredményt kapjuk.
            A gépi kódból a szerkesztő állít elő futtatható programot. A magas szintű nyelvek közül a C-ben előfordító segítségével generálunk forrásszövegből forrásszöveget.
            Az interpreternek is megvan a saját elemzője viszont itt soronként veszi az utasítást és egyből el is végzi. A programnyelvek szabályai a hivatkozási nyelvek.
            Amikor a programozó programkódot ír akkor algoritmusokat fogalmaz meg, amivel vezérli a processzort. A lefgőbb eszköz a változó, amelyben értékeket tud letárolni, amelyeket az algoritmusok változtatnak.
            
        </para>
        <para>
            Imperatív nyelvek:Eljárásorientált nyelvek,Objektum orientált nyelvek.
         </para>
         <para>
             Dekleratív nyelvek : Funkcionális nyelvek, logikai nyelvek.
         </para>
         <para>
             Az adattípus egy absztrakt programozási eszköz. Az adattípusnak neve van , amely egy azonosító. Egy adattípust három dolog határoz meg: tartomány, műveletek,reprezentáció. A tartomány megmondja milyen értékeket vehet fel a változó. Minden típúsos nyelvnek vannak standard beépített típúsai. Némelyik programozási nyelv megengedi, hogy definiáljunk típúsokat. Vannak olyan típúsok,amelyet úgy kapok, hogy egy másik típús tartományát szűkítem le ők az altípúsok.Adattípúsok csoportja lehet skalár vagy struktúrált.
             Egyszerű típusok: egész,valós, karakteres,logikai.
             Összetett típusok:tömb(értékei csak egyféle típusú lehet kivéve olyan programozási nyelvekben ahol megvan engedve, hogy a tömb összetett adattípusú legyen.A tömb indexei általában egész típúsúak.A tömb nevével a tömb összes elemére képesek vagyunk hivatkozni.).
             Mutató típus:elemei memóriacímek, legfontosabb művelet a memóriacímen lévő érték elérése.
         </para>
         <para>
             Nevesített konstans: mindig deklarálni kell van neve, típusa és értéke. Mindig a nevével hivatkozunk rá és a hozzá rendelt értékre hivatkozik.
         </para>
         <para>
             Utasítások
         </para>
         <para>
             Utasításokkal adjuk meg az algoritmus lépéseit.Kétféle van deklarációs és végrehajtó utasítások.
             A deklarációs utasítások a fordítóprogramnak szólnak, olyan infromációt szolgáltat amelyet a fordítóprogram használ fel majd a tárgykód elkészítéséhez.
             A végrehajtó utasítások csoportosítása a következő szerint zajlik:
                     
          </para>
          <itemizedlist>
          <listitem>
              <para>1. Értékadó utasítás:módosítja vagy beállítja a változó értékeit
          </para>
          </listitem>
          <listitem>
              <para>2. Üres utasítás:főleg az eljárás orientált nyelvekben van rájuk szükség ilyenkor a processzor egy üres utasítást hajt végre
          </para>
          </listitem>
          <listitem>
              <para>3. Ugró utasítás:goto utasítás a program a futását máshonnan folytatja(ahová az ugró utasítás mutat) 
          </para>
          </listitem>
          <listitem>
              <para>4. Elágaztató utasítások:if else szerkezet vagy a többirányú switch szerkezet.Itt tudjuk irányítani, hogy a program futása merre haladjon tovább. Ifnél ha egy utasítás van a zárójel blokkot elhagyhatjuk.Switchnél van default-ág amely akkor hajtódik végre ha egyik lehetőség sem hajtódik végre.
          </para>
          </listitem>
          <listitem>
              <para>5. Ciklusszervezı utasítások:bizonyos utasítások ismétlése. Előírt lépésszámú ciklus for.Elől tesztelős ciklus while, hátul tesztelős do while.Ha egyszersem fut le üres ciklusnak hívjuk a do while mindenképp lefut 1x.Emellett a ciklusok lehetnek végtelenek és összetettek mikor egymásba ágyazzuk őket.
          </para>
          </listitem>
          <listitem>
              <para> 6. Hívó utasítás: 
          </para>
          </listitem>
          <listitem>
              <para>7. Vezérlésátadó utasítások:continue, break,return. A continuevel kitudunk hagyni például ciklusból lépéseket,break-el megtudjuk szakítani a ciklust vagy az utasítást. A returnnel adunk vissza értékeket főképp függvényeknél használjuk őket.
          </para>
          </listitem>
          <listitem>
              <para>8. I/O utasítások
          </para>
          </listitem>
          <listitem>
              <para>9. Egyéb utasítások
          </para>
          <para>
              Programok szerkezete:
          </para>
          <para>
              Az eljárásorientált nyelvekben :alprogram,blokk,csomag,taszk létezik.
          </para>
          <para>
              Az alprogramok az újrafelhasználás eszközei másnéven eljárások vagy függvények.A meghívásukkal aktivizálódnak.Meghívni a deklarált nevükkel tudjuk.Az alprogramoknak van neve, paraméter listája,törzse amiben az utasítások és vezérlések szerepelnek és környezete, amelyben megtudjuk hívni. A függvényeknek mindig van visszatérési értékük,tehát értéket számolnak ez az érték bármilyen típúsú lehet.Az eljárás ezzel szemben valamilyen tevékenységet hajt végre és ahol meghívjuk ennek a tevékenységnek az eredményét akarjuk felhasználni.
          </para>
          <para>
              Függvényt meghívni csak kifejezésben lehet. A függvény akkor fejeződik be szabályosan ha van visszatérési értéke. Nem szabályosan legtöbbször megszakítás vagy goto utasítással való megszakítással.
              Minden programozási nyelvben van egy fő program egység a main. Minden alprogram ennek adja át a vezérlést.
          </para>
          <para>
              A hívási lánc: amikor egy programegység meghív egy másik programegységet.
              Rekurzió lehet közvetlen:Amikor a program önmagát hívja meg rekurzívan vagy lehet közvetett amikor egy már előzőleg meghívottat és lefutott alprogramot újra meghív.Ezek mindig átírhatók iteratív algoritmusokká ami kevesebb memóriát használ.Néhány programozási nyelvben meglehet határozni másodlagos belépési pontokat vagyis, hogy ne a fejtől fusson le a függvény vagy az eljárás.
           </para>
           <para>
               Paraméterkiértékelés:formális paraméterlistából csak egy darab van viszont az aktuális paraméterlisták száma végtelen lehet.
               Paraméterkiértékelés aspektusok:sorrendi kötés vagy név szerinti kötés.
               
           </para>
           <para>
               A blokk: olyan programegység amely más programegység belsejében helyezkedik el.A blokk aktivizációja úgy történik hogy vagy rákerül a vezérlés vagy a goto utasítással a kezdetére ugrunk.
           </para>
          </listitem>
          </itemizedlist>
          <para>
              Az I/O:
          </para>
          <para>
              Az I/O az eszközökkel kapcsolatos kommunikációért felelős. Feladata a perifériák és program közötti adatmozgatás. Az I/O-nál az állományok a fontosak. Ezek lehetnek logikai vagy fizikai állományok, amelyeket funkcióik szerint is megkülönböztetjük van az input ami a program bemenete tehát már létező fájl. Az output a program által létrehozott fájl és van az input-output ez az eset, amikor egy fájlt beolvasunk majd módosítjuk a tartalmát,de nem új fájlt hozunk létre mint az outputnál. 
          </para>
          <para>
              Az adatátvitelt is két részre bontjuk van a folyamatos és a bináris átvitel. A bináris átvitelnél a bitsorozatnak meg kell egyeznie a tárban és az adattárolón is. A file streameket mindig deklarálni kell. Figyelni kell, hogy milyen adatokkal dolgozunk és aszerint választani adattípust. A filestream deklarálásával és a filenév megadásával megnyitjuk az adott file-t és ekkor dolgozhatunk vele módosíthatjuk,felhasználhassuk a benne lévő adatokat. Ezeket a filestreameket a használat után mindig lekell zárni. Kiemelt fontossággal a streamwritereket.
              </para>
              <para>
                  A C nyelvnek az input/output alapból nem része ezt külön könyvtár meghívásával implementálhatjuk a nyelvbe.
              </para>
              <para>
                  Kivétel kezelés:
                  </para>
                  <para>
                      A kivételkezelés egy meghatározott program rész, amely akkor fut le ha valamilyen esemény bekövetkezik. A kivételeknek van egy neve és egy kódja.
                  </para>
                  <para>
                      A beépített kivételek például nullával való osztás vagy egy tömb indexén való túl hivatkozás. A programozó is definiálhat kivételeket, ezt főleg a try catch szerkezettel képes elérni vagy az if-el.Kivétel keletkezésekor is folytatódhat a program például a goto utasítás használatával vagy egyszerűen olyan kivételt adunk meg, amely nem szakítja meg a program futását például a do while-ban ha azt vizsgáljuk, hogy a megadott formában adtuk -e meg a bemenetet, ha nem akkor csak annyit csinálunk,hogy újra kérjük, hogy adja meg a felhasználó.
                  </para>
    </section>        
    <section>
        <title>Programozás bevezetés</title>
        <para>                
            <citation>KERNIGHANRITCHIE</citation>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/zmfT9miB-jY">https://youtu.be/zmfT9miB-jY</link>
        </para>
        <para>
            3. Fejezet Vezérlési szerkezetek
            
            A C-nyelvben az utasításokat pontos vesszővel zárjuk. Az utasítás blokkokat {}-el jelöljük.
        </para>
        <para>
            3.2
            If-else
            
            Az if szerkezet döntést hozó utasítás. Ha(feltétel) utasítás else utasítás2 , az elsre nem mindig van szükség lehet olyan is, hogy ha történik valami akkor csináljon valamit a program,ha nem akkor ugorja át. Az else ág mindig a hozzá legközelebb lévő else nélküli ifhez fog tartozni. Ha nem így szeretnénk akkor az if hatáskörét {}-jelek közé kell tenni. Az ifnek van egy másik fajtája az else if itt több feltétel egymásba ágyazása történik. Itt a legutolsó else akkor fut le ha egyik feltétel sem teljesül. Amint egy teljesül a feltételek közül a program végrehajtja és kilép az else-if ágról.
        </para>
        
        <para>
            3.3 Switch
            A switchet többirányú programelágazások esetén használjuk itt valamilyen állandó értékhez rendeli az utasítást. A switchben case-eket hozunk létre, amelyek akkor futnak le ha teljesül az állandó, ezen kívül minden case-t break-el kell zárni.Létezik egy default ág, amely akkor fut le ha egyik case feltétele se teljesül.
            </para>
            <para>
                A break el nem csak a switchből tudunk kilépni hanem bármely ciklust képesek vagyunk vele megszakítani.
             </para> 
             <para>
                A for előírt lépésszámú ciklus, amelynek van egy kezdő értéke egy végértéke és egy lépésszáma. 
              </para>
              <para>
                  A while addig fut amíg a ciklusfejben megadott feltétel hamis nem lesz.
               </para>
               <para>
                   A do while utasítás a while-al szemben az, hogy mindenképp lefut egyszer a ciklusban található utasítás.
               </para>
               <para>
                   A continue utasítás segítségével lehetséges, hogy egy ciklusból kihagyjunk lépéseket vagyis,hogy átugorjunk egy egy lefutást. A goto utasítással a megadott címkére ugorhatunk, goto utasítással általában több egymásba ágyazott ciklusból tudunk kilépni mivel a break nem működik ezeknél.
               </para>  
    </section>        
    <section>
        <title>Programozás</title>
        <para>                
            <citation>BMECPP</citation>
        </para>
        <para>
            A BME-tankönyv második fejezete a C++ újításait veszi szemügyre a C-vel szemben ezek nagyrészt, csak az olvashatóbb kódot szolgálják.
        </para>
        <para>
        Az első változás a függvények paraméterénél van.C++ ban ha egy függvénynek nem adunk paramétert akkor az egy void paraméterrel lesz egyenlő. C-ben ugyanez tetszőleges számú paramétert jelentett,de C++-ban ez a lehetőség már a ...-lett.
        </para>
        <para>
            Ha nem adunk meg visszatérési típust akkor C-nél ez az int lesz viszont C++-nál már hibát ír ki a fordító azaz nincs alapból ilyen definiálva.
        </para>
        <para>
            C++-ban kétféle main függvény van van a sima int main() és létezik az int main(int argc,char** argv). Az argc a bemenő paraméterek számát, míg az argv egy 2 dimenziós tömböt ad vissza magukról a bemenő argumentumokról. És C++-ban már nem kötelező a return 0; ami a sikeres futást jelzi.
        </para>
        <para>
            Ezeken kívül bevezetésre került a bool típus ez megkönnyíti az olvasást két értéke van true és false.
         </para>
         <para>
             Emellett alapértelmezett típus lett a wchar_t amivel több bájtos karaktereket lehet letárolni pl unicode karakterek. 
         </para>
         <para>
             Képesek vagyunk C függvényeket meghívni C++-ból ez az extern "C"-vel lehetséges. Ez a fordítottját is lehetővé teszi,ha a C++-ban definiálunk egy ilyen függvényt akkor C-ből képesek vagyunk C++ függvényt hívni.
         </para>
         <para>
             Emellett adhatunk meg alapértelmezett argumentumokat ezeket arra az esetre hozhatunk létre ha létrejöhet olyan hiba, hogy a felhasználó kevesebb argumentumot ad meg ekkor van rá egy alapértelmezett alternatíva.
          </para>
          <para>
              A változók deklarálása bárhol történhet ahol utasítás lehetséges a C++-ban érdemes mindig azelőtt deklarálni egy változót mielőtt felhasználunk ezzel átláthatóbb a kód.
          </para>
          <para>
             Függvénynevek túlterhelése: A C-ben a függvényeket a neve azonosította, így nem lehetett két ugyan azzal a névvel rendelkező fv.-t létrehozni. De a C++-ban egy fügvényt már a neve és az argumentumai együttesen azonosítja.
           </para>
           <para>
               Paraméter szerinti átadás: A függényben pointert hívunk meg int* valami néven,míg a változó elé egy és jelet teszünk, így a változó memória címét adjuk át a függvénynek tehát ha valamilyen módosítás történik a változóval a függvényben az kihat a mainben deklarált változóra is. C++-ban bevezették a referencia típust.Így elég ha simán átadjuk a változó értékét majd a függvényben adunk és jelet az argumentumnak aztán mint egy sima változó úgy tudunk vele dolgozni.
            </para>
            <para>
                Az és jel ezen kívül még egy egyoperandusú operátor ami a változó címét adja vissza C-ben még nem szerepelhetett deklarációnál,így a C++-ezt felhasználhatta a referencia típushoz.
            </para>
            <para>
                A cím szerinti paraméter átadás főként a nagyméretű adatszerkezetnél hasznos ugyanis nem kell egy másolatot készíteni róluk, hanem közvetlenül használhatjuk az adatszerkezetet és módosítgathatunk benne.
            </para>
            <para>
                A programok egységbe zárás alapelvét nevezik osztálynak.Az osztályoknak lehetnek példányai ezeket objektumoknak nevezzük.Az objektumnak azt a tulajdonságát, hogy a többi program ne férjen hozzá a tulajdonságaihoz adatrejtésnek nevezzük.Öröklődés amikor az egyik osztály örökli a másik osztály bizonyos tulajdonságait.Behelyettesíthetőség a fentebb lévő osztályba mindig behelyettesíthessük az elvontabb osztályokat.Típustámogatás az osztályok támogathatnak operátorokat és típuskonverziót.
                A struktúráknak nem csak tagváltozói, hanem tagfüggvényei is lehetnek.A tagváltozók megnevezése attribútumok, míg a függvényeké metódusok. Ahányszor létrehozunk egy példányát a stuktúrára a tagváltozók annyiszor foglalnak helyet a memóriában.A tagváltozókra az arrow vagy a . operátorokkal hivatkozhatunk.A hatókör operátor vagy scope azt segíti elő ha több osztálynak van ugyan olyan nevű függvénye akkor képes megkülönböztetni őket. A tagváltozókkal ellentétben a tagfüggvényeknek nem történik többszörös helyfoglalás ezek egy példányban jönnek létre.
                Mivel a függvények képesek változtatni a tagváltozókat ezért pointereket használunk a tagfüggvényeknél és láthatatlan első paramétereket alkalmazunk.Ezek a láthatatlan első paraméterek a példányosított osztály mutatója.Ha van egy ugyanolyan nevű tagváltozónk és függvény argumentumunk akkor az argumentumok és lokális változók az erősebbek,ilyenkor általában a this-el hivatkozunk a tagváltozókra.Az adatrejtésnél a public részben lévő tagváltozókat mindenki eléri mint egy globális változót viszont a private részben csak a belső tagfüggvények férnek hozzá,ilyenkor lekérdező függvényeket kell írnunk.
                Ha nem írunk láthatóságot szabályzó kulcsszavakat automatikusan publicot használ viszont az osztály private-t.
                Az osztály az egy típus.Egy osztályt több osztály is felhasználhat ezért a .h-fájlban a #ifndef és #define segítségével érjük el hogy az osztálydefiníció többször is be legyen includeolva egy programba.
                Mivel a csak deklarált változók véletlen értékeket hordoznak ezért szükségünk van a konstruktorokra amelyek inicializálják a tagváltozókat.Ez egy olyan speciális tagfüggvény,amelynek ugyan az a neve mint az osztálynak és minden egyes példányosításkor lefut.
                A függvénynév túlterhelése miatt egy függvénynek lehet különböző paraméterszámú konstruktora.A destruktorok a fölösleges memória használat felszabadítását végzik általában ~-el kezdődnek és ezt az osztály neve követi, nem lehet argumentuma.
                Dinamikus memóriaterület kezelés: a malloc és free függvényekkel lehetséges.A c++-ban a dinamikus memória kezelést a new végzi és a felszabadítást a delete.A new használatával már nem kell számolgatni a tömböknél a lefoglalt hely értékét, mivel magától képes kiszámolni.A tömböknél mindig a szögletes zárójelt használjuk tehát a delet-hez is hozzá kell írni a szögletes zárójelet ha tömböt akarunk felszabadítani.
                Ha Fifo adatszerkezetet akarunk használni akkor ha új elemet akarunk hozzáadni akkor eggyel nagyobb területet kell foglalnunk majd a végére beszúrni az értéket viszont ha ki akarunk értéket szedni akkor az elsőnek betett értéket tudjuk kivenni majd miután kiszedtük az értéket belőle a megmaradt elemeket visszamásolni és a destruktor a fölösleges helyet elpucolja.Másoló konstruktor ez esetében az inicializálás a már meglévő osztály változói alapján történik mivel egy másolatot akarunk létrehozni.
                A fordító a másoló konstruktort hívja meg ha megvan írva ha nem írunk másoló konstruktort akkor alapértelmezetten bitenként másol.A bitenkénti másolás neve a sekély másolás.Ha a dinamikus adattagokat is másoljuk azt mély másolásnak nevezzük.Érték szerinti paraméter átadásnál referencia szerint kell átadni a másolókonstruktor paraméterét.
            </para>
            <para>
                A friend függvénnyel egy osztály feljogosít más osztályokat vagy globális függvényeket, hogy a private részéhez hozzáférjenek.Tagváltozókat a :-al tudjuk inicializálni a konstruktor zárójele után írva.A referencia tagváltozókat kötelező az inicializálási listában inicializálni.Statikus változókat a static kulcsszóval deklarálunk.Ez hasonlít a globális változókhoz, de annyi különbséggel, hogy itt megkell adni melyik osztályból származik a ::-al.Kezdőértéket nem kötelező adni nekik, mivel ekkor 0 lesz a kezdőértékük. A statikus változóknak a program indításakor foglalódik hely és csak a program bezárásával szabadul fel.
                A statikus függvények törzsében nem használhatunk this mutatót mivel nem lenne értelme.
                Az első futtatott kód a program indulásakor nem a main függvény első sora hanem a statikus és globális változók konstruktorai.Beágyazott függvények esetén megkell adni a teljes elérési utat,ha nem az osztálydefinícióban definiált.A beágyazott osztályoknál nem kap speciális jogokat sem a beágyazott sem a tartalmazó osztály.A különböző absztrakt adattípusok miatt megjelent az operátor túlterhelés.A c++-ban az operátorok az argumentumaikon végeznek műveletet,az operátorok különböző számú argumentumot igényelhetnek. A c++-ban az operator kulcsszó.Itt nem az operátorok működésének megváltoztatása a cél, hanem az, hogy a saját magunk által létrehozott típusra is használhassuk.A túlterhelt operátorokat általában tagfüggvényként érdemes definiálni.
            </para>
            <para>
              Típuskonverzió:  
            </para>
            <para>
                C++-ban az enum típusnál a típuskonverziót muszáj kiírni, ugyan ez a helyzet a void*-nál ugyan ez a helyzet áll fent. Referenciaként való átadásnál nem használható típuskényszerítés. Ugyanis a memóriareprezentációk eltérőek minden típusnál.Függvénynek nem tudunk átadni ideiglenesen létrehozott értéket, csak ha a függvény konstanst kér paraméterül. Mivel az ideiglenesen létrehozott értékek konstansok.
            </para>
            <para>
                Ha viszont nem akarjuk változtatni az értéket akkor a fordító engedi felhasználni a kényszerített típuscserét csak, ilyenkor a const kulcsszót kell használnunk.Tehát elkerüljük a fölösleges másolgatásokat és dolgozhatunk az argumentumként átadott értékkel.
            </para>
            <para>
                A C++-ban a megírt osztályokat könnyen használhassuk típusként mint a beépített típúsokat akkor azt az operátor túlterheléssel és konverziós konstruktor jelenti a megoldás kulcsát. A stringeket a \0 karakterrel zárjuk ez egy nul terminator karakter, az az egy záró karakter, ezt nem számoljuk a string hosszába. Tehát egy char tömböt a legkönnyebben úgy alakítunk stringgé, hogy túlterheljük az összeadás operátort, amely így összefogja fűzni a szöveget és a char tömb elemszámát 1 el megnövelve a végére tesszük a \0 záró karaktert.
                A típuskonverzió a beépített típúsokra úgy működik, hogy a kívánt típust zárójelekbe zárva elé tesszük az átalakítani kívánt változó neve elé. Ha egy argumentumú a konstruktor akkor itt a konvezió magától értetődik. Ha kiakarjuk kapcsolni az automatikus típuskonverziót akkor azt az osztályunk konstruktora elé írt  explicit kulcsszóval érhetjük el. A visszaalakítást az operator kulcsszóval érhetjük el ilyenkor a konstruktor visszatérési értékéhez nem kell típust megadni mert azt már a bemenetkor megkapott változó megmutatja. Az ilyen operátorok csak tagfüggvényként hívhatók meg, mivel globálisan nem alkalmazhatók.
                Viszont nincsenek kizárva az öröklődés alól és lehetnek virtuálisak is. Ha több megoldás is létezik akkor a fordítónknak megkell adnunk, hogy pontosan, hogyan szeretnénk létrehozni a típus átalakítást. Ha nem írunk másoló konstruktort akkor is létezik, mivel a fordító biztosít egy bitenkénti vagy másnéven sekély másolást. A leszármaztatás és az öröklődés nagyon veszélyes ugyanis felléphet olyan probléma, hogy a mutató a program által használt memóriaterüten kívülre próbál hivatkozni, ezért az oprendszer a biztonság szempontjából leállítja  a programot.
             </para>
             <para>
                 A c++ a típuskonverzióra új teret nyit ezek a castok. Ez lehet statikus vagy dinamikus vagy konstans, esetleg újraértelmező konverzió.Használata az előző 4 _cast típus_neve és az átalakítani kívánt változó. Konstans típust csak konstans típuskonverzió alakíthat nem konstans típussá.
             </para>
             <para>
                 Kivételkezelés(hozzá kapcsolódó rész a pici könyvben):
                 </para>
                 <para>
                     A kivételkezelés lényege, hogy a program futása során felmerülő problémákat kezeljük. Tehát a program ne hibásan folytassa a működését.
                     Ha valamilyen kivétel bekövetkezik a kivételkezelő segítségével érjük el, hogy a program egy új ágon folytatódjon. A try-catch szerkezet az alap hibakezelő parancs.Itt különböző hibaüzeneteket a throw kulcsszóval tudunk megadni. A try blokkban lévő kód lefut ha nem tapasztal hibát és ilyenkor a catch ág nem fut le és a catch után folytatódik azonnal a program. Ha hibát tapasztal akkor kiirja a throw-ban megadott hibaüzenetet. A throw paraméterét kivétel objektumnak is nevezzük. A throw utasítás a returnhoz hasonló. A catch(...) minden kivételt eltud kapni viszont ha megadunk neki valamilyen argumentumot akkor csak akkor dob hibaüzenetet ha illeszkedik valamelyik hiba típusra. A nem elkapott kivételek esetén a program meghívja az abort függvényt, amely a program bezárásával jár ezek a kezeletlen kivételek. A kivételkezelésnek vannak szintjei, ezt a try-catch blokkok egybeágyazásával érhetjük el. A kivételkezelésnél lehetséges a kivétel újra dobása tehát a throw-al elkapott hibát tovább dobhatjuk a throwval egy fentebbi szinten lévő kivétel kezelőnek. A kivétel dobása és elkapása között is futhat le utasítás, ilyenek az osztályok destruktorai amelyek felszabadítják az objektumot. Az uncaught_exception függvény megmondja, hogy a kivételkezelés miatt futott -e le a destruktor vagy sem. A valóságban persze kivételkezelő osztályokat használunk inkább a kivételek kezelésére. 
                 </para>
    </section>        
  
</chapter>                
