<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:Az előadás fóliája.               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Decimálisból unárisba, úgy váltunk, hogy annyi 1 est írunk le,amennyi a szám értéke vagy másképp fogalmazva amilyen messze van a 0-tól.Pl.:n=90 esetén 90 db 1 est kell leírnunk.
        </para>
        <para>
            Tehát itt pozitív számokat tudunk ábrázolni. A megvalósítás 2 féle lehet vagy indítunk egy for ciklust 0-tól és minden egyes lépésnél egy stringbe összefűzzük az egyeseket. Vagy pedig a számtól indítunk egy ciklust 0-ig és ugyan ezt tesszük. 
        </para>
        <figure>
             <title>Turing gép</title>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/turing.jpg" scale="45" />
                </imageobject>
        </mediaobject>
        </figure>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A környezetfüggő grammatika olyan szabályok összessége,amely segítségével a nyelvben minden jelsorozatot képesek vagyunk előállítani.
        </para>
        <itemizedlist>
            <listitem>
                <para>
            A grammatika forrása a fólia:
            A, B, C „változók”
            a, b, c „konstansok”
            A → aAB, A → aC, CB → bCc, cB → Bc, C → bc
            S-ből indulunk ki.
            S→ aC
            aC(C→ bc)
            abc
                </para>
            </listitem>
            <listitem>
                <para>
            S→ aAB
                </para>
            </listitem>
            <listitem>
                <para>
            aAB(A→ aAB)
                </para>
            </listitem> 
            <listitem>
                <para>aaABB(A→ aAB)</para>                        
            </listitem>
            <listitem>
                <para>aaaABBB(A→ aAB)</para>                        
            </listitem>
            <listitem>
                <para>aaaaABBBB(A→ aC)</para>                        
            </listitem>
            <listitem>
                <para>aaaaaCBBBB(CB→ bCc)</para>                        
            </listitem>
            <listitem>
                <para>aaaaabCcBBB(cB→ Bc)</para>                        
            </listitem>
            <listitem>
                <para>aaaaabCBcBB(CB→ bCc)</para>                        
            </listitem>
            <listitem>
                <para>aaaaabbCccBB(cB→ Bc)x2</para>                        
            </listitem>
            <listitem>
                <para>aaaaabbCBccB(CB→ bCc)</para>                        
            </listitem>
            <listitem>
                <para>aaaaabbbCcccB(cB→ Bc)x3</para>                        
            </listitem>
            <listitem>
                <para>aaaaabbbCBccc(CB→ bCc)</para>                        
            </listitem>
            <listitem>
                <para>aaaaabbbbCcccc(C→ bc)</para>                        
            </listitem>
            <listitem>
                <para>aaaaabbbbbccccc</para>                        
            </listitem>                   
            <listitem>
                <para>Ez a grammatika biztosan ezt a nyelvet generálja.</para>                        
            </listitem>            
            
        </itemizedlist>
       <itemizedlist> 
        <listitem>
                <para>S, X, Y „változók”
            a, b, c „konstansok”
            S → abc, S → aXbc, Xb → bX, Xc → Ybcc, bY → Yb, aY -> aaX, aY → aa
            S-ből indulunk ki
            A grammatika forrása a fólia.</para>                        
        </listitem>  
        <listitem>
                <para>S(S→aXbc)</para>                        
        </listitem>
        <listitem>
                <para>aXbc(Xb→bX)</para>                        
        </listitem> 
        <listitem>
                <para>abXc(Xc→Ybcc)</para>                        
        </listitem> 
        <listitem>
                <para>abYbcc(bY→Yb)</para>                        
        </listitem> 
        <listitem>
                <para>aYbbcc(aY→aaX)</para>                        
        </listitem> 
        <listitem>
                <para>aaXbbcc(Xb→xB)2*</para>                        
        </listitem> 
        <listitem>
                <para>aabbXcc(Xc→Ybcc)</para>                        
        </listitem> 
        <listitem>
                <para>aabbYbccc(bY→Yb)</para>                        
        </listitem> 
        <listitem>
                <para>aaYbbbccc(aY→aaX)</para>                        
        </listitem> 
        <listitem>
                <para>aaaXbbbccc(Xb→bX)3*</para>                        
        </listitem> 
        <listitem>
                <para>aaabbbXccc(Xc→Ybcc)</para>                        
        </listitem> 
        <listitem>
                <para>aaabbbYbcccc(bY→Yb)3*</para>                        
        </listitem> 
        <listitem>
                <para>aaaYbbbbcccc(aY→aa)</para>                        
        </listitem> 
        <listitem>
                <para>aaaabbbbcccc</para>                        
        </listitem> 
        <listitem>
                <para>Környezetfüggő! Az abc-nek bárhanyadik hatványa előállítható.</para>                        
        </listitem>     
    </itemizedlist>
    
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/Savitar97/Prog1/blob/master/hivatkozas/hivatkozas.c">https://github.com/Savitar97/Prog1/blob/master/hivatkozas/hivatkozas.c</link> 
            
        </para>
        <para>
            <link xlink:href="https://hu.wikipedia.org/wiki/Backus%E2%80%93Naur-forma">https://hu.wikipedia.org/wiki/Backus%E2%80%93Naur-forma</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A C utasítások a C nyelv kulcsszavai.
            A C nyelv tartalmazza a többsoros utasítás blokkokat,iterációkat (for,while,do-while),vezérlő szerkezeteket(if,switch),operátorok(++,--,!=,stb),deklarációk.
        </para>
        <para>
            Backus normal form egy általánosított leírása a programozási nyelveknek.Nyelv független. Vagyis ez a séma ráilleszthető a legtöbb programozási nyelvre és használható a nyelvekben írt programok leírására.
        </para>
        <programlisting><![CDATA[
            Forrás:https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_1.pdf?fbclid=IwAR1eImHN5PINqTMnhpJItlqA_PtEcfNGKqndS6nt5wNTFr_X-hcSdiVr5iQ
            A backus leírás röviden:
        <szimbólum> ::= <kifejezés a szimbólumra>
            van egy szimbólum aztán a ::= után van egy formai leírása 
        <egész szám> ::= <előjel><szam>
        <előjel> ::= [-|+]
        <szam> ::= <szamjegy>{<szamjegy>}
        <szamjegy> ::= 0|1|2|3|4|5|6|7|8|9
            /*A forrás az előadás pptjéről származik.*/
       ]]>
        </programlisting>
        <para>
            A c89-ben még nem lehet egysoros kommenteket írni (<command>//</command>) és szintén nem lehet a for ciklus fejében változót deklarálni, amit a c99 már enged. A különböző változatoknál a fordítást a <command>-std</command> kapcsolóval érjük el ez, így néz ki a gyakorlatban:
        </para>
        <para>
            <command>gcc -o hivatkozas -std=c89 hivatkozas.c</command>
        </para>
        <para>
            <command>gcc -o hivatkozas -std=c99 hivatkozas.c</command>
        </para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        int main(){
        int i;
        for(i=0;i<10;i++)
        /*Ez így lefog futni c89-ben is.
          Viszont
          for(int i=0;i<10;i++)
          ez nem.
        */
        return 0;
        }       ]]>
        </programlisting>
        <para>
            A következő hibaüzenetet kapjuk:
        </para>
        <figure>
             <title>Hibaüzenet</title>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/error.png" scale="50" />
                </imageobject>
        </mediaobject>
        </figure>
        <para>
            Emellett van olyan ami a c89-ben működik, de c99 ben nem. Ilyen a következő kódcsipet:
        </para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>


        int main()
        {
	
        int restrict=1;
        if (restrict) printf("restricted");
        return 0;
        }
              ]]>
        </programlisting>
        <para>
            Azért fordulhat le mivel a restrict még nem kulcsszó c89-ben,viszont c99-ben már igen. A restrict megadja, hogy mely pointerek férhetnek hozzá az adott memória területhez,ezeket a pointereket nem lehet módosítani.
        </para>
        
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/9KnMqrkj_kU">https://youtu.be/9KnMqrkj_kU</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Savitar97/Prog1/tree/master/real">https://github.com/Savitar97/Prog1/tree/master/real</link>
        </para>
       <programlisting language="c"><![CDATA[
        %{
#include <stdio.h>
int counter = 0;
%}
digit	[0-9]
%%
{digit}*(\.{digit}+)?	{++counter; 
    printf("[realnum=%s %f]", yytext, atof(yytext));}
%%
int
main ()
{
 yylex ();
 printf("Valós számok száma:[ %d]\n", counter);
 return 0;
}
              ]]>
        </programlisting>
        <para>
            A lexernél az egyes részeket %%-jelek választják el. Az első résznél jön a könyvtár hivatkozás és a deklarációk és az első rész végén definiálunk(ilyen itt a digit amiben a számokat definiáljuk) a definícióknál lehet megadni a karakter csoportokat, amelyeket keresni akarunk a beolvasott szövegből.
        </para>
        <para>
            A következőben jöhetnek a formázási szabályok itt mondhatjuk meg, hogy mi történjen ha megtalálja az adott karakter sorozatot vagy karaktert a lexer.Itt már használhatjuk a definíciókat.
        </para>
        <para>
            Az első kapcsos zárójelben megadtuk, hogy számot keresünk, ezután a csillag azt jelenti,hogy bármennyiszer előfordulhat 0 vagy akárhány.Majd egy pontnak kell követni azután a + miatt jönnie kell egy számnak legalább vagy többnek. A kérdőjel viszont azt jelzi, hogy nem muszáj pontnak következnie és utána számnak ez azért kell mivel az egész számok is beletartoznak a valós számokhoz.
        </para>
        <para>
            Majd azt adjuk meg ha találunk ilyen karaktersorozatot akkor a countert növeljük-1 el. És írjuk ki ezt a karakter sorozatot -között az atof függvény pedig ezt a karaktersorozatot valós számmá konvertálja.
        </para>
        <para>
            A programot a következő képpen kell fordítanunk:
        </para>
        <para>
        <command>lex -o real.c real.l</command>
        </para>
        <para>
            Ilyenkor a lexer megírja a c programot, majd a létrehozott .c fájlt gcc-vel fordítjuk.
        </para>
        <para>
        <command>gcc -o real real.c -lfl</command>
        </para>
        <para>
            Az utolsó részben jön a program main része itt meghívjuk a yylex() függvényt és kiirassuk,hogy hány db valós számot találtunk.
        </para>
        <para>
            A programot a <keycap>Ctrl+D</keycap>-vel tudjuk leállítani.
        </para>
        <figure>
             <title>Lexikális elemző</title>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/realnum.png" scale="30" />
                </imageobject>
        </mediaobject>
        </figure>
    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Savitar97/Prog1/tree/master/leet">https://github.com/Savitar97/Prog1/tree/master/leet</link> 
        </para>
       <programlisting language="c"><![CDATA[
        /*
Forditas:
$ lex -o lexer.c lexer.l 

Futtatas:
$ gcc lexer.c -o lexer -lfl
(kilépés az input vége, azaz Ctrl+D)

*/
%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <time.h>
  #include <ctype.h>

  #define LEXERSIZE (sizeof lexer / sizeof (struct cipher))
    
  struct cipher {
    char c;
    char *leet[4];
  } lexer [] = {

  
  {'0', {"Ω", "○", "º", ""}},
  {'1', {"I", "I", "L", "L"}},
  {'2', {"Z", "Z", "Z", "e"}},
  {'3', {"E", "E", "E", "E"}},
  {'4', {"h", "h", "A", "A"}},
  {'5', {"S", "S", "S", "S"}},
  {'6', {"b", "b", "G", "G"}},
  {'7', {"T", "T", "j", "j"}},
  {'8', {"X", "X", "X", "X"}},
  {'9', {"g", "g", "j", "j"}}
  
// https://simple.wikipedia.org/wiki/Leet
  };
  
%}
%%
. {
    
    int found = 0;
    for(int i=0; i<LEXERSIZE; ++i)
    {
    
      if(lexer[i].c == tolower(*yytext))
      {
      
        int r = 1+(int) (100.0*rand()/(RAND_MAX+1.0));
      
          if(r<91)
          printf("%s", lexer[i].leet[0]);
          else if(r<95)
          printf("%s", lexer[i].leet[1]);
        else if(r<98)
          printf("%s", lexer[i].leet[2]);
        else 
          printf("%s", lexer[i].leet[3]);

        found = 1;
        break;
      }
      
    }
    
    if(!found)
       printf("%c", *yytext);   
    
  }
%%
int 
main()
{
  srand(time(NULL)+getpid());
  yylex();
  return 0;
}
              ]]>
        </programlisting>
        <para>
            Elsőként definiáljuk a lexer struktúra méretét. Ezt a define LEXERSIZE adja meg vagyis a sorok számát ez 36.
        </para>
        <para>
            Ezután létrehozunk egy struktúrát. Amiben definiálunk egy karakter változót és egy 4 elemű mutató tömböt.Ha több variációt akarunk behelyettesítésre,akkor növeljük ennek a számát.
         </para>
         <para>
             Ezután létrehozzuk a struktúra fő részét itt az első elem karakter típúsú, amelyet majd vizsgálunk, a 2. elem egy 4 elemű tömb, amelyben a karakter helyettesítési lehetőségeit tároljuk. 
          </para>
          <para>
              Ez volt az első része a lexernek ahol definiálunk és könyvtárakat hívunk meg.Most a defíníciókat kihagyjuk.
          </para>
          <para>
              Következőnek az utasítás része jön a lexernek.Itt behozunk egy változót, amely azt jelzi, hogy megtalálta -e a karaktert a struktúrában ha nem akkor visszaadja majd a lent lévő if magát a karaktert. Majd indítunk egy fort,amely átnézi a struktúrát keresve a beolvasott karaktert, amelyet kisbetűre alakítunk,hogy ne kelljen külön kezelni a kis és nagy betűket.
          </para>
          <para>
              Ha megtaláltuk a karaktert akkor egy random számot generálunk, amely segít, hogy véletlenszerűen válasszunk a 4 opció közül, amelyet a 4 if segítségével érünk el és visszaadjuk, hogy megtaláltuk a karaktert <function>found</function>.
          </para>
          <para>
              Az utolsó részben a mainben találjuk az srandomot, amely a randomot hívja ehhez a <emphasis role="red">time.h</emphasis> szükséges.A random generálásához az időt használja és hozzáadja a getpidet, amely az <function>unistd.h</function> könyvtárban van,ez azért szükséges, hogy jobban generáljon random számokat,vagyis nagyobb legyen a számok randomitása.Majd végül meghívjuk a yylex() függvényt.
          </para>
          <para>
              A program futása során a lexer cseréli a beírt karakter sorozatot és ez 1337 5P34CH.
          </para>
          <figure>
             <title>1337 5P34CH</title>
          <mediaobject>
                <imageobject>
                    <imagedata fileref="img/leet.png" scale="30" />
                </imageobject>
        </mediaobject>
          </figure>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>            
            </listitem>
        </orderedlist>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Savitar97/Prog1/tree/master/3.6 ">https://github.com/Savitar97/Prog1/tree/master/3.6 </link> 
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <programlisting><![CDATA[signal.c:2: Include file <unistd.h> matches the name of a POSIX library, but
    the POSIX library is not being used.  Consider using +posixlib or
    +posixstrictlib to select the POSIX library, or -warnposix to suppress this
    message.
  Header name matches a POSIX header, but the POSIX library is not selected.
  (Use -warnposixheaders to inhibit warning)
signal.c: (in function jelkezelo)
signal.c:5:20: Parameter a not used
  A function parameter is not used in the body of the function. If the argument
  is needed for type compatibility or future plans, use /*@unused@*/ in the
  argument declaration. (Use -paramuse to inhibit warning)
signal.c: (in function main)
signal.c:16:4: Return value (type [function (int) returns void]) ignored:
                  signal(SIGINT, S...
  Result returned by function call is not used. If this is intended, can cast
  result to (void) to eliminate message. (Use -retvalother to inhibit warning)
signal.c:5:6: Function exported but not used outside signal: jelkezelo
  A declaration is exported, but not used outside this module. Declaration can
  use static qualifier. (Use -exportlocal to inhibit warning)
   signal.c:8:1: Definition of jelkezelo
]]></programlisting>
        <para>
            A signalis program ignorálja(SIG_IGN) vagy másképp elkapja a signalokat ilyen például a <keycap>Ctrl+C</keycap>.De nem minden signalt tud ignorálni. A SIGINT itt magát a signalt jelzi a 2 es signal neve SIGINT. A program a signal kezelést átadja a jelkezelésnek, tehát innentől nem a signal hajtódik végre hanem a jelkezelő.
        </para>
        <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>
        <para>
            Egy for ciklus, amely 0-tól meg 5-ig.A ++i jelentése pre-increment,ez azt jelenti, hogy a művelet lefutása előtt megnöveli a változó értékét egyel.
        </para>
        <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>
        <para>
            For ciklus amely 0-tól megy 5-ig. Az i++ az post-increment,vagyis előbb hajtódik végre a művelet és csak utána növeli az i értékét 1 el.
        </para>
         <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>
         <para>Splint error:</para>
         <programlisting><![CDATA[forforth.c: (in function main)
forforth.c:7:24: Expression has undefined behavior (left operand uses i,
                    modified by right operand): tomb[i] = i++
  Code has unspecified behavior. Order of evaluation of function parameters or
  subexpressions is not defined, so if a value is used and modified in
  different places not separated by a sequence point constraining evaluation
  order, then the result of the expression is unspecified. (Use -evalorder to
  inhibit warning)

Finished checking --- 1 code warning]]></programlisting>
         <para>
             A tömbnek az elemét egyenlővé teszi az i-nek az értékével kivéve az első elemét.
         </para>
          <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>
          <para>Elindít egy for ciklust, amely addig fut amíg az i kisebb mint n,ezen kívül d és s egy tömb mutatója és azokat a tömb elemeket,amelyekre a d mutat kicseréli azokra, amelyekre az s mutat.</para>
         <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>
         <para>splint által elkapott error:</para>
         <programlisting><![CDATA[forsix.c: (in function main)
forsix.c:10:24: Argument 2 modifies a, used by argument 1 (order of evaluation
                   of actual parameters is undefined): f(a, ++a)
  Code has unspecified behavior. Order of evaluation of function parameters or
  subexpressions is not defined, so if a value is used and modified in
  different places not separated by a sequence point constraining evaluation
  order, then the result of the expression is unspecified. (Use -evalorder to
  inhibit warning)
forsix.c:10:32: Argument 1 modifies a, used by argument 2 (order of evaluation
                   of actual parameters is undefined): f(++a, a)
forsix.c:10:19: Argument 2 modifies a, used by argument 3 (order of evaluation
    of actual parameters is undefined): printf("%d %d\n", f(a, ++a), f(++a, a))
forsix.c:10:30: Argument 3 modifies a, used by argument 2 (order of evaluation
    of actual parameters is undefined): printf("%d %d\n", f(a, ++a), f(++a, a))
forsix.c:2:5: Function exported but not used outside forsix: f
  A declaration is exported, but not used outside this module. Declaration can
  use static qualifier. (Use -exportlocal to inhibit warning)
   forsix.c:5:1: Definition of f

Finished checking --- 5 code warnings
]]></programlisting>
         <para>
             Az első függvénynél az a értéke 2 vel nő, míg a 2. nál 1 el.
         </para>
         <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>
         <para>Splint:</para>
         <programlisting><![CDATA[forseven.c:2:5: Function exported but not used outside forseven: f
  A declaration is exported, but not used outside this module. Declaration can
  use static qualifier. (Use -exportlocal to inhibit warning)
   forseven.c:5:1: Definition of f
]]></programlisting>
<para>Kiirja a függvénnyel módosított a és az a értékét.</para>
<programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>
<para>Splint error:</para>
   <programlisting><![CDATA[foreight.c:6:2: Parse Error. (For help on parse errors, see splint -help
               parseerrors.)]]></programlisting>
   <para>Konvertálási hiba a pointer értékeket %d helyett a %p-vel kell kiiratni printf-el.Tehát egy memória címet egészként akart kiiratni.</para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            1. Bármely x-hez létezik olyan y, hogy az y nagyobb mint x és y prím.
            2. Bármely x-hez létezik olyan y, hogy y nagyobb mint x és y prím és y+2 is prím.
            3. Létezik olyan y, hogy bármely x esetén ha x prím akkor az x kisebb mint y.
            4. létezik olyan y, hogy bármely x esetén ha y kisebb mint x akkor x nem prím.
        </para>
        <para>
            Az első állítás azt mondja ki, hogy a prímszámok száma végtelen. Míg a második azt jelenti, hogy végtelen sok ikerprím létezik.Itt az SSy a successor function vagy másnéven a rákövetkező függvény,tehát  <emphasis role="red">S(S(y))=(y+1)+1)</emphasis>.
        </para>
        <para>
            A 3. állítás ennek az ellenkezőjét fejezi ki, tehát azt, hogy a prímszámok száma véges. A negyedik állítás ezzel ekvivalens, mivel azt mondja ki, hogy létik olyan y amitől nincs nagyobb prímszám.
        </para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/Savitar97/Prog1/tree/master/deklaracio"> https://github.com/Savitar97/Prog1/tree/master/deklaracio</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Az int a létrehoz egy változót, amely int típúsú az az egész, a néven. Egy változónak van neve,típúsa,hatásköre,memória címe ahol tárolódik,értéke.
        </para>
        <para>
            int *b létrehoz egy mutatót, amely a-nak a memória címére hivatkozik.
        </para>
        <para>
            Az r rekurzívan hivatkozik a értékére. Vagyis ugyan arra a memória területre hivatkozik mint az a. Tehát ha r értékét változtatjuk akkor a-nak az értéke is változik. Szemléltetésként a következő kód szolgál:
        </para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
#include <iostream>

using namespace std;

int main()
{
	int a=5;
	int &r=a;
	int *d=&a;
	int *b=&r;
	cout<<a<<'\n'<<r<<'\n'<<d<<'\n'<<b<<'\n';
	r=r+2;
	cout<<a<<'\n'<<r<<'\n'<<d<<'\n'<<b<<'\n';
	return 0;
}
              ]]>
        </programlisting>
     <para>
         Futtatva következő eredményt kapjuk:
     </para>
     <figure>
             <title>Deklaráció</title>
      <mediaobject>
                <imageobject>
                    <imagedata fileref="img/deklaracio.png" scale="75" />
                </imageobject>
        </mediaobject>
     </figure>
    <programlisting><![CDATA[int c[5];]]></programlisting>
    <para>
        A c deklarál egy 5 elemű tömböt.
    </para>
    <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting> 
    <para>
        A tr tömb rekurzívan hivatkozik a c tömbre.
    </para>
    <programlisting><![CDATA[int *d[5];]]></programlisting> 
    <para>
        Létrehoz egy 5 elemű mutató tömböt.
    </para>
    <programlisting><![CDATA[int *h ();]]></programlisting> 
    <para>
        Olyan függvény ami egy egészre mutató mutatót ad vissza.
    </para>
    <programlisting><![CDATA[int *(*l) ();]]></programlisting> 
    <para>
        Egy egészre mutató mutatóra mutatót ad vissza a függvényt.
    </para>
    <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>
    <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>
     <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>
      <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>
      <programlisting><![CDATA[
int (*sumormul (int c)) (int a, int b)
{
    if (c)
        return mul;
    else
        return sum;

}
int
main ()
{
 int (*f) (int, int);
int (*(*g) (int)) (int, int);
g = sumormul;
f = *g (0);
return 0;
}]]></programlisting>
<para>Itt az f egy olyan pointer ami egy int típúsú függvényre mutat.Tehát egyszerűen meghívhatunk függvényeket vele, ha egyenlővé tesszük egy 2 egészet kapó függvénnyel.Itt például a szummal ami 2 egészet kap. int sum(int a,int b)</para>
<para>Az f-nek megadjuk a g pointert.Viszont a g már a sumormulra mutat.Tehát egy olyan füvvényre, ami egy egész számot kér és egy két egész számot kapó függvényre hivatkozik.Ha a g-nek 0 át adunk akkor a sum, ha ettől eltérő értéket akkor a mul fog végrehajtódni.Amit így már az f(int,int)-el tudunk hivatkozni és attól függ,hogy melyik függvényre mutat, hogy a g-nek az értéke alapján a g melyik függvényre mutat.</para>
    </section>                     


</chapter>                
